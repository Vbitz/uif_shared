// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: uif.proto
#ifndef GRPC_uif_2eproto__INCLUDED
#define GRPC_uif_2eproto__INCLUDED

#include "uif.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace uif {

class UIFramework final {
 public:
  static constexpr char const* service_full_name() {
    return "uif.UIFramework";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Edit(::grpc::ClientContext* context, const ::uif::EditReq& request, ::uif::EditResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uif::EditResp>> AsyncEdit(::grpc::ClientContext* context, const ::uif::EditReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uif::EditResp>>(AsyncEditRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uif::EditResp>> PrepareAsyncEdit(::grpc::ClientContext* context, const ::uif::EditReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uif::EditResp>>(PrepareAsyncEditRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::uif::Event>> GetEvents(::grpc::ClientContext* context, const ::uif::GetEventsReq& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::uif::Event>>(GetEventsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::uif::Event>> AsyncGetEvents(::grpc::ClientContext* context, const ::uif::GetEventsReq& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::uif::Event>>(AsyncGetEventsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::uif::Event>> PrepareAsyncGetEvents(::grpc::ClientContext* context, const ::uif::GetEventsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::uif::Event>>(PrepareAsyncGetEventsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetServerProperties(::grpc::ClientContext* context, const ::uif::GetServerPropertiesReq& request, ::uif::GetServerPropertiesResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uif::GetServerPropertiesResp>> AsyncGetServerProperties(::grpc::ClientContext* context, const ::uif::GetServerPropertiesReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uif::GetServerPropertiesResp>>(AsyncGetServerPropertiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uif::GetServerPropertiesResp>> PrepareAsyncGetServerProperties(::grpc::ClientContext* context, const ::uif::GetServerPropertiesReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uif::GetServerPropertiesResp>>(PrepareAsyncGetServerPropertiesRaw(context, request, cq));
    }
    virtual ::grpc::Status SetClearColor(::grpc::ClientContext* context, const ::uif::SetClearColorReq& request, ::uif::SetClearColorResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uif::SetClearColorResp>> AsyncSetClearColor(::grpc::ClientContext* context, const ::uif::SetClearColorReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uif::SetClearColorResp>>(AsyncSetClearColorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uif::SetClearColorResp>> PrepareAsyncSetClearColor(::grpc::ClientContext* context, const ::uif::SetClearColorReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uif::SetClearColorResp>>(PrepareAsyncSetClearColorRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Edit(::grpc::ClientContext* context, const ::uif::EditReq* request, ::uif::EditResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Edit(::grpc::ClientContext* context, const ::uif::EditReq* request, ::uif::EditResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetEvents(::grpc::ClientContext* context, const ::uif::GetEventsReq* request, ::grpc::ClientReadReactor< ::uif::Event>* reactor) = 0;
      virtual void GetServerProperties(::grpc::ClientContext* context, const ::uif::GetServerPropertiesReq* request, ::uif::GetServerPropertiesResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetServerProperties(::grpc::ClientContext* context, const ::uif::GetServerPropertiesReq* request, ::uif::GetServerPropertiesResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetClearColor(::grpc::ClientContext* context, const ::uif::SetClearColorReq* request, ::uif::SetClearColorResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetClearColor(::grpc::ClientContext* context, const ::uif::SetClearColorReq* request, ::uif::SetClearColorResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::uif::EditResp>* AsyncEditRaw(::grpc::ClientContext* context, const ::uif::EditReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::uif::EditResp>* PrepareAsyncEditRaw(::grpc::ClientContext* context, const ::uif::EditReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::uif::Event>* GetEventsRaw(::grpc::ClientContext* context, const ::uif::GetEventsReq& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::uif::Event>* AsyncGetEventsRaw(::grpc::ClientContext* context, const ::uif::GetEventsReq& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::uif::Event>* PrepareAsyncGetEventsRaw(::grpc::ClientContext* context, const ::uif::GetEventsReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::uif::GetServerPropertiesResp>* AsyncGetServerPropertiesRaw(::grpc::ClientContext* context, const ::uif::GetServerPropertiesReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::uif::GetServerPropertiesResp>* PrepareAsyncGetServerPropertiesRaw(::grpc::ClientContext* context, const ::uif::GetServerPropertiesReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::uif::SetClearColorResp>* AsyncSetClearColorRaw(::grpc::ClientContext* context, const ::uif::SetClearColorReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::uif::SetClearColorResp>* PrepareAsyncSetClearColorRaw(::grpc::ClientContext* context, const ::uif::SetClearColorReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Edit(::grpc::ClientContext* context, const ::uif::EditReq& request, ::uif::EditResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uif::EditResp>> AsyncEdit(::grpc::ClientContext* context, const ::uif::EditReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uif::EditResp>>(AsyncEditRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uif::EditResp>> PrepareAsyncEdit(::grpc::ClientContext* context, const ::uif::EditReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uif::EditResp>>(PrepareAsyncEditRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::uif::Event>> GetEvents(::grpc::ClientContext* context, const ::uif::GetEventsReq& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::uif::Event>>(GetEventsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::uif::Event>> AsyncGetEvents(::grpc::ClientContext* context, const ::uif::GetEventsReq& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::uif::Event>>(AsyncGetEventsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::uif::Event>> PrepareAsyncGetEvents(::grpc::ClientContext* context, const ::uif::GetEventsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::uif::Event>>(PrepareAsyncGetEventsRaw(context, request, cq));
    }
    ::grpc::Status GetServerProperties(::grpc::ClientContext* context, const ::uif::GetServerPropertiesReq& request, ::uif::GetServerPropertiesResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uif::GetServerPropertiesResp>> AsyncGetServerProperties(::grpc::ClientContext* context, const ::uif::GetServerPropertiesReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uif::GetServerPropertiesResp>>(AsyncGetServerPropertiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uif::GetServerPropertiesResp>> PrepareAsyncGetServerProperties(::grpc::ClientContext* context, const ::uif::GetServerPropertiesReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uif::GetServerPropertiesResp>>(PrepareAsyncGetServerPropertiesRaw(context, request, cq));
    }
    ::grpc::Status SetClearColor(::grpc::ClientContext* context, const ::uif::SetClearColorReq& request, ::uif::SetClearColorResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uif::SetClearColorResp>> AsyncSetClearColor(::grpc::ClientContext* context, const ::uif::SetClearColorReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uif::SetClearColorResp>>(AsyncSetClearColorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uif::SetClearColorResp>> PrepareAsyncSetClearColor(::grpc::ClientContext* context, const ::uif::SetClearColorReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uif::SetClearColorResp>>(PrepareAsyncSetClearColorRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Edit(::grpc::ClientContext* context, const ::uif::EditReq* request, ::uif::EditResp* response, std::function<void(::grpc::Status)>) override;
      void Edit(::grpc::ClientContext* context, const ::uif::EditReq* request, ::uif::EditResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetEvents(::grpc::ClientContext* context, const ::uif::GetEventsReq* request, ::grpc::ClientReadReactor< ::uif::Event>* reactor) override;
      void GetServerProperties(::grpc::ClientContext* context, const ::uif::GetServerPropertiesReq* request, ::uif::GetServerPropertiesResp* response, std::function<void(::grpc::Status)>) override;
      void GetServerProperties(::grpc::ClientContext* context, const ::uif::GetServerPropertiesReq* request, ::uif::GetServerPropertiesResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetClearColor(::grpc::ClientContext* context, const ::uif::SetClearColorReq* request, ::uif::SetClearColorResp* response, std::function<void(::grpc::Status)>) override;
      void SetClearColor(::grpc::ClientContext* context, const ::uif::SetClearColorReq* request, ::uif::SetClearColorResp* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::uif::EditResp>* AsyncEditRaw(::grpc::ClientContext* context, const ::uif::EditReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::uif::EditResp>* PrepareAsyncEditRaw(::grpc::ClientContext* context, const ::uif::EditReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::uif::Event>* GetEventsRaw(::grpc::ClientContext* context, const ::uif::GetEventsReq& request) override;
    ::grpc::ClientAsyncReader< ::uif::Event>* AsyncGetEventsRaw(::grpc::ClientContext* context, const ::uif::GetEventsReq& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::uif::Event>* PrepareAsyncGetEventsRaw(::grpc::ClientContext* context, const ::uif::GetEventsReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::uif::GetServerPropertiesResp>* AsyncGetServerPropertiesRaw(::grpc::ClientContext* context, const ::uif::GetServerPropertiesReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::uif::GetServerPropertiesResp>* PrepareAsyncGetServerPropertiesRaw(::grpc::ClientContext* context, const ::uif::GetServerPropertiesReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::uif::SetClearColorResp>* AsyncSetClearColorRaw(::grpc::ClientContext* context, const ::uif::SetClearColorReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::uif::SetClearColorResp>* PrepareAsyncSetClearColorRaw(::grpc::ClientContext* context, const ::uif::SetClearColorReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Edit_;
    const ::grpc::internal::RpcMethod rpcmethod_GetEvents_;
    const ::grpc::internal::RpcMethod rpcmethod_GetServerProperties_;
    const ::grpc::internal::RpcMethod rpcmethod_SetClearColor_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Edit(::grpc::ServerContext* context, const ::uif::EditReq* request, ::uif::EditResp* response);
    virtual ::grpc::Status GetEvents(::grpc::ServerContext* context, const ::uif::GetEventsReq* request, ::grpc::ServerWriter< ::uif::Event>* writer);
    virtual ::grpc::Status GetServerProperties(::grpc::ServerContext* context, const ::uif::GetServerPropertiesReq* request, ::uif::GetServerPropertiesResp* response);
    virtual ::grpc::Status SetClearColor(::grpc::ServerContext* context, const ::uif::SetClearColorReq* request, ::uif::SetClearColorResp* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Edit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Edit() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Edit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Edit(::grpc::ServerContext* /*context*/, const ::uif::EditReq* /*request*/, ::uif::EditResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEdit(::grpc::ServerContext* context, ::uif::EditReq* request, ::grpc::ServerAsyncResponseWriter< ::uif::EditResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetEvents() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEvents(::grpc::ServerContext* /*context*/, const ::uif::GetEventsReq* /*request*/, ::grpc::ServerWriter< ::uif::Event>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEvents(::grpc::ServerContext* context, ::uif::GetEventsReq* request, ::grpc::ServerAsyncWriter< ::uif::Event>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetServerProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetServerProperties() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetServerProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerProperties(::grpc::ServerContext* /*context*/, const ::uif::GetServerPropertiesReq* /*request*/, ::uif::GetServerPropertiesResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServerProperties(::grpc::ServerContext* context, ::uif::GetServerPropertiesReq* request, ::grpc::ServerAsyncResponseWriter< ::uif::GetServerPropertiesResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetClearColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetClearColor() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SetClearColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetClearColor(::grpc::ServerContext* /*context*/, const ::uif::SetClearColorReq* /*request*/, ::uif::SetClearColorResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetClearColor(::grpc::ServerContext* context, ::uif::SetClearColorReq* request, ::grpc::ServerAsyncResponseWriter< ::uif::SetClearColorResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Edit<WithAsyncMethod_GetEvents<WithAsyncMethod_GetServerProperties<WithAsyncMethod_SetClearColor<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Edit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Edit() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::uif::EditReq, ::uif::EditResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::uif::EditReq* request, ::uif::EditResp* response) { return this->Edit(context, request, response); }));}
    void SetMessageAllocatorFor_Edit(
        ::grpc::MessageAllocator< ::uif::EditReq, ::uif::EditResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::uif::EditReq, ::uif::EditResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Edit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Edit(::grpc::ServerContext* /*context*/, const ::uif::EditReq* /*request*/, ::uif::EditResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Edit(
      ::grpc::CallbackServerContext* /*context*/, const ::uif::EditReq* /*request*/, ::uif::EditResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetEvents() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::uif::GetEventsReq, ::uif::Event>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::uif::GetEventsReq* request) { return this->GetEvents(context, request); }));
    }
    ~WithCallbackMethod_GetEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEvents(::grpc::ServerContext* /*context*/, const ::uif::GetEventsReq* /*request*/, ::grpc::ServerWriter< ::uif::Event>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::uif::Event>* GetEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::uif::GetEventsReq* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetServerProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetServerProperties() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::uif::GetServerPropertiesReq, ::uif::GetServerPropertiesResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::uif::GetServerPropertiesReq* request, ::uif::GetServerPropertiesResp* response) { return this->GetServerProperties(context, request, response); }));}
    void SetMessageAllocatorFor_GetServerProperties(
        ::grpc::MessageAllocator< ::uif::GetServerPropertiesReq, ::uif::GetServerPropertiesResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::uif::GetServerPropertiesReq, ::uif::GetServerPropertiesResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetServerProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerProperties(::grpc::ServerContext* /*context*/, const ::uif::GetServerPropertiesReq* /*request*/, ::uif::GetServerPropertiesResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetServerProperties(
      ::grpc::CallbackServerContext* /*context*/, const ::uif::GetServerPropertiesReq* /*request*/, ::uif::GetServerPropertiesResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetClearColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetClearColor() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::uif::SetClearColorReq, ::uif::SetClearColorResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::uif::SetClearColorReq* request, ::uif::SetClearColorResp* response) { return this->SetClearColor(context, request, response); }));}
    void SetMessageAllocatorFor_SetClearColor(
        ::grpc::MessageAllocator< ::uif::SetClearColorReq, ::uif::SetClearColorResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::uif::SetClearColorReq, ::uif::SetClearColorResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetClearColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetClearColor(::grpc::ServerContext* /*context*/, const ::uif::SetClearColorReq* /*request*/, ::uif::SetClearColorResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetClearColor(
      ::grpc::CallbackServerContext* /*context*/, const ::uif::SetClearColorReq* /*request*/, ::uif::SetClearColorResp* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Edit<WithCallbackMethod_GetEvents<WithCallbackMethod_GetServerProperties<WithCallbackMethod_SetClearColor<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Edit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Edit() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Edit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Edit(::grpc::ServerContext* /*context*/, const ::uif::EditReq* /*request*/, ::uif::EditResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetEvents() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEvents(::grpc::ServerContext* /*context*/, const ::uif::GetEventsReq* /*request*/, ::grpc::ServerWriter< ::uif::Event>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetServerProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetServerProperties() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetServerProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerProperties(::grpc::ServerContext* /*context*/, const ::uif::GetServerPropertiesReq* /*request*/, ::uif::GetServerPropertiesResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetClearColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetClearColor() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SetClearColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetClearColor(::grpc::ServerContext* /*context*/, const ::uif::SetClearColorReq* /*request*/, ::uif::SetClearColorResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Edit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Edit() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Edit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Edit(::grpc::ServerContext* /*context*/, const ::uif::EditReq* /*request*/, ::uif::EditResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEdit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetEvents() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEvents(::grpc::ServerContext* /*context*/, const ::uif::GetEventsReq* /*request*/, ::grpc::ServerWriter< ::uif::Event>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEvents(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetServerProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetServerProperties() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetServerProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerProperties(::grpc::ServerContext* /*context*/, const ::uif::GetServerPropertiesReq* /*request*/, ::uif::GetServerPropertiesResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServerProperties(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetClearColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetClearColor() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SetClearColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetClearColor(::grpc::ServerContext* /*context*/, const ::uif::SetClearColorReq* /*request*/, ::uif::SetClearColorResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetClearColor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Edit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Edit() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Edit(context, request, response); }));
    }
    ~WithRawCallbackMethod_Edit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Edit(::grpc::ServerContext* /*context*/, const ::uif::EditReq* /*request*/, ::uif::EditResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Edit(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetEvents() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetEvents(context, request); }));
    }
    ~WithRawCallbackMethod_GetEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEvents(::grpc::ServerContext* /*context*/, const ::uif::GetEventsReq* /*request*/, ::grpc::ServerWriter< ::uif::Event>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetServerProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetServerProperties() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetServerProperties(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetServerProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerProperties(::grpc::ServerContext* /*context*/, const ::uif::GetServerPropertiesReq* /*request*/, ::uif::GetServerPropertiesResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetServerProperties(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetClearColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetClearColor() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetClearColor(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetClearColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetClearColor(::grpc::ServerContext* /*context*/, const ::uif::SetClearColorReq* /*request*/, ::uif::SetClearColorResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetClearColor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Edit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Edit() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::uif::EditReq, ::uif::EditResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::uif::EditReq, ::uif::EditResp>* streamer) {
                       return this->StreamedEdit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Edit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Edit(::grpc::ServerContext* /*context*/, const ::uif::EditReq* /*request*/, ::uif::EditResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEdit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::uif::EditReq,::uif::EditResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetServerProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetServerProperties() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::uif::GetServerPropertiesReq, ::uif::GetServerPropertiesResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::uif::GetServerPropertiesReq, ::uif::GetServerPropertiesResp>* streamer) {
                       return this->StreamedGetServerProperties(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetServerProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetServerProperties(::grpc::ServerContext* /*context*/, const ::uif::GetServerPropertiesReq* /*request*/, ::uif::GetServerPropertiesResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetServerProperties(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::uif::GetServerPropertiesReq,::uif::GetServerPropertiesResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetClearColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetClearColor() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::uif::SetClearColorReq, ::uif::SetClearColorResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::uif::SetClearColorReq, ::uif::SetClearColorResp>* streamer) {
                       return this->StreamedSetClearColor(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetClearColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetClearColor(::grpc::ServerContext* /*context*/, const ::uif::SetClearColorReq* /*request*/, ::uif::SetClearColorResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetClearColor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::uif::SetClearColorReq,::uif::SetClearColorResp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Edit<WithStreamedUnaryMethod_GetServerProperties<WithStreamedUnaryMethod_SetClearColor<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetEvents() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::uif::GetEventsReq, ::uif::Event>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::uif::GetEventsReq, ::uif::Event>* streamer) {
                       return this->StreamedGetEvents(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetEvents(::grpc::ServerContext* /*context*/, const ::uif::GetEventsReq* /*request*/, ::grpc::ServerWriter< ::uif::Event>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetEvents(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::uif::GetEventsReq,::uif::Event>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetEvents<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Edit<WithSplitStreamingMethod_GetEvents<WithStreamedUnaryMethod_GetServerProperties<WithStreamedUnaryMethod_SetClearColor<Service > > > > StreamedService;
};

}  // namespace uif


#endif  // GRPC_uif_2eproto__INCLUDED
