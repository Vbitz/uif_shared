// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uif.proto

#include "uif.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace uif {
constexpr Point::Point(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct PointDefaultTypeInternal {
  constexpr PointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PointDefaultTypeInternal() {}
  union {
    Point _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PointDefaultTypeInternal _Point_default_instance_;
constexpr Rectangle::Rectangle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , width_(0)
  , height_(0){}
struct RectangleDefaultTypeInternal {
  constexpr RectangleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RectangleDefaultTypeInternal() {}
  union {
    Rectangle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RectangleDefaultTypeInternal _Rectangle_default_instance_;
constexpr SolidBrush::SolidBrush(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : color_(0u){}
struct SolidBrushDefaultTypeInternal {
  constexpr SolidBrushDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SolidBrushDefaultTypeInternal() {}
  union {
    SolidBrush _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SolidBrushDefaultTypeInternal _SolidBrush_default_instance_;
constexpr GradientStop::GradientStop(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : color_(0u)
  , position_(0){}
struct GradientStopDefaultTypeInternal {
  constexpr GradientStopDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GradientStopDefaultTypeInternal() {}
  union {
    GradientStop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GradientStopDefaultTypeInternal _GradientStop_default_instance_;
constexpr LinearGradientBrush::LinearGradientBrush(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stops_()
  , start_(nullptr)
  , end_(nullptr){}
struct LinearGradientBrushDefaultTypeInternal {
  constexpr LinearGradientBrushDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LinearGradientBrushDefaultTypeInternal() {}
  union {
    LinearGradientBrush _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LinearGradientBrushDefaultTypeInternal _LinearGradientBrush_default_instance_;
constexpr Brush::Brush(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct BrushDefaultTypeInternal {
  constexpr BrushDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BrushDefaultTypeInternal() {}
  union {
    Brush _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BrushDefaultTypeInternal _Brush_default_instance_;
constexpr RectangleNode::RectangleNode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rect_(nullptr)
  , stroke_(nullptr)
  , filled_(false)
  , rounded_radius_x_(0)
  , rounded_radius_y_(0){}
struct RectangleNodeDefaultTypeInternal {
  constexpr RectangleNodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RectangleNodeDefaultTypeInternal() {}
  union {
    RectangleNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RectangleNodeDefaultTypeInternal _RectangleNode_default_instance_;
constexpr TextEditSpan::TextEditSpan(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : offset_(0)
  , length_(0)
  , _oneof_case_{}{}
struct TextEditSpanDefaultTypeInternal {
  constexpr TextEditSpanDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TextEditSpanDefaultTypeInternal() {}
  union {
    TextEditSpan _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TextEditSpanDefaultTypeInternal _TextEditSpan_default_instance_;
constexpr TextNode::TextNode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : edit_spans_()
  , text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , font_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bounds_(nullptr)
  , stroke_(nullptr)
  , font_weight_(0)

  , font_style_(0)

  , font_stretch_(0)

  , font_size_(0)
  , text_align_(0)

  , paragraph_align_(0)
{}
struct TextNodeDefaultTypeInternal {
  constexpr TextNodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TextNodeDefaultTypeInternal() {}
  union {
    TextNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TextNodeDefaultTypeInternal _TextNode_default_instance_;
constexpr PCBegin::PCBegin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pt_(nullptr)
  , kind_(0)
{}
struct PCBeginDefaultTypeInternal {
  constexpr PCBeginDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PCBeginDefaultTypeInternal() {}
  union {
    PCBegin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PCBeginDefaultTypeInternal _PCBegin_default_instance_;
constexpr PCEnd::PCEnd(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : kind_(0)
{}
struct PCEndDefaultTypeInternal {
  constexpr PCEndDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PCEndDefaultTypeInternal() {}
  union {
    PCEnd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PCEndDefaultTypeInternal _PCEnd_default_instance_;
constexpr PCLineTo::PCLineTo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pt_(nullptr){}
struct PCLineToDefaultTypeInternal {
  constexpr PCLineToDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PCLineToDefaultTypeInternal() {}
  union {
    PCLineTo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PCLineToDefaultTypeInternal _PCLineTo_default_instance_;
constexpr PCCubicCurve::PCCubicCurve(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : control1_(nullptr)
  , control2_(nullptr)
  , end_(nullptr){}
struct PCCubicCurveDefaultTypeInternal {
  constexpr PCCubicCurveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PCCubicCurveDefaultTypeInternal() {}
  union {
    PCCubicCurve _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PCCubicCurveDefaultTypeInternal _PCCubicCurve_default_instance_;
constexpr PCQuadraticCurve::PCQuadraticCurve(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : control1_(nullptr)
  , end_(nullptr){}
struct PCQuadraticCurveDefaultTypeInternal {
  constexpr PCQuadraticCurveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PCQuadraticCurveDefaultTypeInternal() {}
  union {
    PCQuadraticCurve _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PCQuadraticCurveDefaultTypeInternal _PCQuadraticCurve_default_instance_;
constexpr PCArc::PCArc(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : end_(nullptr)
  , x_radius_(0)
  , y_radius_(0)
  , x_axis_rotation_(0)
  , large_arc_flag_(false)
  , sweep_flag_(false){}
struct PCArcDefaultTypeInternal {
  constexpr PCArcDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PCArcDefaultTypeInternal() {}
  union {
    PCArc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PCArcDefaultTypeInternal _PCArc_default_instance_;
constexpr PathCommand::PathCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct PathCommandDefaultTypeInternal {
  constexpr PathCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PathCommandDefaultTypeInternal() {}
  union {
    PathCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PathCommandDefaultTypeInternal _PathCommand_default_instance_;
constexpr PathNode::PathNode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : commands_()
  , stroke_(nullptr)
  , is_filled_(false){}
struct PathNodeDefaultTypeInternal {
  constexpr PathNodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PathNodeDefaultTypeInternal() {}
  union {
    PathNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PathNodeDefaultTypeInternal _PathNode_default_instance_;
constexpr EmptyNode::EmptyNode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct EmptyNodeDefaultTypeInternal {
  constexpr EmptyNodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EmptyNodeDefaultTypeInternal() {}
  union {
    EmptyNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EmptyNodeDefaultTypeInternal _EmptyNode_default_instance_;
constexpr ClipRectNode::ClipRectNode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rect_(nullptr){}
struct ClipRectNodeDefaultTypeInternal {
  constexpr ClipRectNodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClipRectNodeDefaultTypeInternal() {}
  union {
    ClipRectNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClipRectNodeDefaultTypeInternal _ClipRectNode_default_instance_;
constexpr EditCommand::EditCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_id_(uint64_t{0u})
  , object_id_(uint64_t{0u})
  , timestamp_(uint64_t{0u})
  , kind_(0)

  , _oneof_case_{}{}
struct EditCommandDefaultTypeInternal {
  constexpr EditCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EditCommandDefaultTypeInternal() {}
  union {
    EditCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EditCommandDefaultTypeInternal _EditCommand_default_instance_;
constexpr EditReq::EditReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : commands_(){}
struct EditReqDefaultTypeInternal {
  constexpr EditReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EditReqDefaultTypeInternal() {}
  union {
    EditReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EditReqDefaultTypeInternal _EditReq_default_instance_;
constexpr EditResp::EditResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct EditRespDefaultTypeInternal {
  constexpr EditRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EditRespDefaultTypeInternal() {}
  union {
    EditResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EditRespDefaultTypeInternal _EditResp_default_instance_;
constexpr GetEventsReq::GetEventsReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetEventsReqDefaultTypeInternal {
  constexpr GetEventsReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetEventsReqDefaultTypeInternal() {}
  union {
    GetEventsReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetEventsReqDefaultTypeInternal _GetEventsReq_default_instance_;
constexpr CloseEvent::CloseEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : closed_(false){}
struct CloseEventDefaultTypeInternal {
  constexpr CloseEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CloseEventDefaultTypeInternal() {}
  union {
    CloseEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CloseEventDefaultTypeInternal _CloseEvent_default_instance_;
constexpr MouseEvent::MouseEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : location_(nullptr)
  , button_(0)

  , state_(0)
{}
struct MouseEventDefaultTypeInternal {
  constexpr MouseEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MouseEventDefaultTypeInternal() {}
  union {
    MouseEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MouseEventDefaultTypeInternal _MouseEvent_default_instance_;
constexpr KeyboardEvent::KeyboardEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : state_(0)

  , key_code_(0u){}
struct KeyboardEventDefaultTypeInternal {
  constexpr KeyboardEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KeyboardEventDefaultTypeInternal() {}
  union {
    KeyboardEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KeyboardEventDefaultTypeInternal _KeyboardEvent_default_instance_;
constexpr TextHitEvent::TextHitEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mouse_(nullptr)
  , offset_(0u)
  , length_(0u)
  , object_id_(uint64_t{0u}){}
struct TextHitEventDefaultTypeInternal {
  constexpr TextHitEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TextHitEventDefaultTypeInternal() {}
  union {
    TextHitEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TextHitEventDefaultTypeInternal _TextHitEvent_default_instance_;
constexpr Event::Event(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct EventDefaultTypeInternal {
  constexpr EventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventDefaultTypeInternal() {}
  union {
    Event _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventDefaultTypeInternal _Event_default_instance_;
constexpr GetServerPropertiesReq::GetServerPropertiesReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetServerPropertiesReqDefaultTypeInternal {
  constexpr GetServerPropertiesReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetServerPropertiesReqDefaultTypeInternal() {}
  union {
    GetServerPropertiesReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetServerPropertiesReqDefaultTypeInternal _GetServerPropertiesReq_default_instance_;
constexpr GetServerPropertiesResp::GetServerPropertiesResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : window_width_(0u)
  , window_height_(0u){}
struct GetServerPropertiesRespDefaultTypeInternal {
  constexpr GetServerPropertiesRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetServerPropertiesRespDefaultTypeInternal() {}
  union {
    GetServerPropertiesResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetServerPropertiesRespDefaultTypeInternal _GetServerPropertiesResp_default_instance_;
constexpr SetClearColorReq::SetClearColorReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : color_(0u){}
struct SetClearColorReqDefaultTypeInternal {
  constexpr SetClearColorReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetClearColorReqDefaultTypeInternal() {}
  union {
    SetClearColorReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetClearColorReqDefaultTypeInternal _SetClearColorReq_default_instance_;
constexpr SetClearColorResp::SetClearColorResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SetClearColorRespDefaultTypeInternal {
  constexpr SetClearColorRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetClearColorRespDefaultTypeInternal() {}
  union {
    SetClearColorResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetClearColorRespDefaultTypeInternal _SetClearColorResp_default_instance_;
}  // namespace uif
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_uif_2eproto[32];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_uif_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_uif_2eproto = nullptr;

const uint32_t TableStruct_uif_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uif::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uif::Point, x_),
  PROTOBUF_FIELD_OFFSET(::uif::Point, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uif::Rectangle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uif::Rectangle, x_),
  PROTOBUF_FIELD_OFFSET(::uif::Rectangle, y_),
  PROTOBUF_FIELD_OFFSET(::uif::Rectangle, width_),
  PROTOBUF_FIELD_OFFSET(::uif::Rectangle, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uif::SolidBrush, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uif::SolidBrush, color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uif::GradientStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uif::GradientStop, color_),
  PROTOBUF_FIELD_OFFSET(::uif::GradientStop, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uif::LinearGradientBrush, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uif::LinearGradientBrush, stops_),
  PROTOBUF_FIELD_OFFSET(::uif::LinearGradientBrush, start_),
  PROTOBUF_FIELD_OFFSET(::uif::LinearGradientBrush, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uif::Brush, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::uif::Brush, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::uif::Brush, kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uif::RectangleNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uif::RectangleNode, rect_),
  PROTOBUF_FIELD_OFFSET(::uif::RectangleNode, stroke_),
  PROTOBUF_FIELD_OFFSET(::uif::RectangleNode, filled_),
  PROTOBUF_FIELD_OFFSET(::uif::RectangleNode, rounded_radius_x_),
  PROTOBUF_FIELD_OFFSET(::uif::RectangleNode, rounded_radius_y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uif::TextEditSpan, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::uif::TextEditSpan, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uif::TextEditSpan, offset_),
  PROTOBUF_FIELD_OFFSET(::uif::TextEditSpan, length_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::uif::TextEditSpan, edit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uif::TextNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uif::TextNode, bounds_),
  PROTOBUF_FIELD_OFFSET(::uif::TextNode, stroke_),
  PROTOBUF_FIELD_OFFSET(::uif::TextNode, text_),
  PROTOBUF_FIELD_OFFSET(::uif::TextNode, font_name_),
  PROTOBUF_FIELD_OFFSET(::uif::TextNode, font_weight_),
  PROTOBUF_FIELD_OFFSET(::uif::TextNode, font_style_),
  PROTOBUF_FIELD_OFFSET(::uif::TextNode, font_stretch_),
  PROTOBUF_FIELD_OFFSET(::uif::TextNode, font_size_),
  PROTOBUF_FIELD_OFFSET(::uif::TextNode, text_align_),
  PROTOBUF_FIELD_OFFSET(::uif::TextNode, paragraph_align_),
  PROTOBUF_FIELD_OFFSET(::uif::TextNode, edit_spans_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uif::PCBegin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uif::PCBegin, kind_),
  PROTOBUF_FIELD_OFFSET(::uif::PCBegin, pt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uif::PCEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uif::PCEnd, kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uif::PCLineTo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uif::PCLineTo, pt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uif::PCCubicCurve, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uif::PCCubicCurve, control1_),
  PROTOBUF_FIELD_OFFSET(::uif::PCCubicCurve, control2_),
  PROTOBUF_FIELD_OFFSET(::uif::PCCubicCurve, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uif::PCQuadraticCurve, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uif::PCQuadraticCurve, control1_),
  PROTOBUF_FIELD_OFFSET(::uif::PCQuadraticCurve, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uif::PCArc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uif::PCArc, x_radius_),
  PROTOBUF_FIELD_OFFSET(::uif::PCArc, y_radius_),
  PROTOBUF_FIELD_OFFSET(::uif::PCArc, x_axis_rotation_),
  PROTOBUF_FIELD_OFFSET(::uif::PCArc, large_arc_flag_),
  PROTOBUF_FIELD_OFFSET(::uif::PCArc, sweep_flag_),
  PROTOBUF_FIELD_OFFSET(::uif::PCArc, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uif::PathCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::uif::PathCommand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::uif::PathCommand, cmd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uif::PathNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uif::PathNode, commands_),
  PROTOBUF_FIELD_OFFSET(::uif::PathNode, is_filled_),
  PROTOBUF_FIELD_OFFSET(::uif::PathNode, stroke_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uif::EmptyNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uif::ClipRectNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uif::ClipRectNode, rect_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uif::EditCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::uif::EditCommand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uif::EditCommand, timestamp_),
  PROTOBUF_FIELD_OFFSET(::uif::EditCommand, client_id_),
  PROTOBUF_FIELD_OFFSET(::uif::EditCommand, kind_),
  PROTOBUF_FIELD_OFFSET(::uif::EditCommand, parent_id_),
  PROTOBUF_FIELD_OFFSET(::uif::EditCommand, object_id_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::uif::EditCommand, node_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uif::EditReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uif::EditReq, commands_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uif::EditResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uif::GetEventsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uif::GetEventsReq, client_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uif::CloseEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uif::CloseEvent, closed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uif::MouseEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uif::MouseEvent, button_),
  PROTOBUF_FIELD_OFFSET(::uif::MouseEvent, state_),
  PROTOBUF_FIELD_OFFSET(::uif::MouseEvent, location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uif::KeyboardEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uif::KeyboardEvent, state_),
  PROTOBUF_FIELD_OFFSET(::uif::KeyboardEvent, key_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uif::TextHitEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uif::TextHitEvent, mouse_),
  PROTOBUF_FIELD_OFFSET(::uif::TextHitEvent, offset_),
  PROTOBUF_FIELD_OFFSET(::uif::TextHitEvent, length_),
  PROTOBUF_FIELD_OFFSET(::uif::TextHitEvent, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uif::Event, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::uif::Event, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::uif::Event, event_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uif::GetServerPropertiesReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uif::GetServerPropertiesResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uif::GetServerPropertiesResp, window_width_),
  PROTOBUF_FIELD_OFFSET(::uif::GetServerPropertiesResp, window_height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uif::SetClearColorReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uif::SetClearColorReq, color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uif::SetClearColorResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::uif::Point)},
  { 8, -1, -1, sizeof(::uif::Rectangle)},
  { 18, -1, -1, sizeof(::uif::SolidBrush)},
  { 25, -1, -1, sizeof(::uif::GradientStop)},
  { 33, -1, -1, sizeof(::uif::LinearGradientBrush)},
  { 42, -1, -1, sizeof(::uif::Brush)},
  { 51, -1, -1, sizeof(::uif::RectangleNode)},
  { 62, -1, -1, sizeof(::uif::TextEditSpan)},
  { 78, -1, -1, sizeof(::uif::TextNode)},
  { 95, -1, -1, sizeof(::uif::PCBegin)},
  { 103, -1, -1, sizeof(::uif::PCEnd)},
  { 110, -1, -1, sizeof(::uif::PCLineTo)},
  { 117, -1, -1, sizeof(::uif::PCCubicCurve)},
  { 126, -1, -1, sizeof(::uif::PCQuadraticCurve)},
  { 134, -1, -1, sizeof(::uif::PCArc)},
  { 146, -1, -1, sizeof(::uif::PathCommand)},
  { 159, -1, -1, sizeof(::uif::PathNode)},
  { 168, -1, -1, sizeof(::uif::EmptyNode)},
  { 174, -1, -1, sizeof(::uif::ClipRectNode)},
  { 181, -1, -1, sizeof(::uif::EditCommand)},
  { 198, -1, -1, sizeof(::uif::EditReq)},
  { 205, -1, -1, sizeof(::uif::EditResp)},
  { 211, -1, -1, sizeof(::uif::GetEventsReq)},
  { 218, -1, -1, sizeof(::uif::CloseEvent)},
  { 225, -1, -1, sizeof(::uif::MouseEvent)},
  { 234, -1, -1, sizeof(::uif::KeyboardEvent)},
  { 242, -1, -1, sizeof(::uif::TextHitEvent)},
  { 252, -1, -1, sizeof(::uif::Event)},
  { 263, -1, -1, sizeof(::uif::GetServerPropertiesReq)},
  { 269, -1, -1, sizeof(::uif::GetServerPropertiesResp)},
  { 277, -1, -1, sizeof(::uif::SetClearColorReq)},
  { 284, -1, -1, sizeof(::uif::SetClearColorResp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::uif::_Point_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::uif::_Rectangle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::uif::_SolidBrush_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::uif::_GradientStop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::uif::_LinearGradientBrush_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::uif::_Brush_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::uif::_RectangleNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::uif::_TextEditSpan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::uif::_TextNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::uif::_PCBegin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::uif::_PCEnd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::uif::_PCLineTo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::uif::_PCCubicCurve_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::uif::_PCQuadraticCurve_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::uif::_PCArc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::uif::_PathCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::uif::_PathNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::uif::_EmptyNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::uif::_ClipRectNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::uif::_EditCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::uif::_EditReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::uif::_EditResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::uif::_GetEventsReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::uif::_CloseEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::uif::_MouseEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::uif::_KeyboardEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::uif::_TextHitEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::uif::_Event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::uif::_GetServerPropertiesReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::uif::_GetServerPropertiesResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::uif::_SetClearColorReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::uif::_SetClearColorResp_default_instance_),
};

const char descriptor_table_protodef_uif_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tuif.proto\022\003uif\"\035\n\005Point\022\t\n\001x\030\001 \001(\002\022\t\n\001"
  "y\030\002 \001(\002\"@\n\tRectangle\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001"
  "(\002\022\r\n\005width\030\003 \001(\002\022\016\n\006height\030\004 \001(\002\"\033\n\nSol"
  "idBrush\022\r\n\005color\030\001 \001(\r\"/\n\014GradientStop\022\r"
  "\n\005color\030\001 \001(\r\022\020\n\010position\030\002 \001(\002\"k\n\023Linea"
  "rGradientBrush\022 \n\005stops\030\001 \003(\0132\021.uif.Grad"
  "ientStop\022\031\n\005start\030\002 \001(\0132\n.uif.Point\022\027\n\003e"
  "nd\030\003 \001(\0132\n.uif.Point\"]\n\005Brush\022 \n\005solid\030\001"
  " \001(\0132\017.uif.SolidBrushH\000\022*\n\006linear\030\002 \001(\0132"
  "\030.uif.LinearGradientBrushH\000B\006\n\004kind\"\215\001\n\r"
  "RectangleNode\022\034\n\004rect\030\001 \001(\0132\016.uif.Rectan"
  "gle\022\032\n\006stroke\030\002 \001(\0132\n.uif.Brush\022\016\n\006fille"
  "d\030\003 \001(\010\022\030\n\020rounded_radius_x\030\004 \001(\002\022\030\n\020rou"
  "nded_radius_y\030\005 \001(\002\"\212\002\n\014TextEditSpan\022\016\n\006"
  "offset\030\001 \001(\005\022\016\n\006length\030\002 \001(\005\022\023\n\tfont_nam"
  "e\030\004 \001(\tH\000\022&\n\013font_weight\030\005 \001(\0162\017.uif.Fon"
  "tWeightH\000\022$\n\nfont_style\030\006 \001(\0162\016.uif.Font"
  "StyleH\000\022(\n\014font_stretch\030\007 \001(\0162\020.uif.Font"
  "StretchH\000\022\023\n\tfont_size\030\010 \001(\002H\000\022\033\n\005brush\030"
  "\t \001(\0132\n.uif.BrushH\000\022\023\n\tunderline\030\n \001(\010H\000"
  "B\006\n\004edit\"\345\002\n\010TextNode\022\036\n\006bounds\030\001 \001(\0132\016."
  "uif.Rectangle\022\032\n\006stroke\030\002 \001(\0132\n.uif.Brus"
  "h\022\014\n\004text\030\003 \001(\t\022\021\n\tfont_name\030\004 \001(\t\022$\n\013fo"
  "nt_weight\030\005 \001(\0162\017.uif.FontWeight\022\"\n\nfont"
  "_style\030\006 \001(\0162\016.uif.FontStyle\022&\n\014font_str"
  "etch\030\007 \001(\0162\020.uif.FontStretch\022\021\n\tfont_siz"
  "e\030\010 \001(\002\022\"\n\ntext_align\030\t \001(\0162\016.uif.TextAl"
  "ign\022,\n\017paragraph_align\030\n \001(\0162\023.uif.Parag"
  "raphAlign\022%\n\nedit_spans\030\013 \003(\0132\021.uif.Text"
  "EditSpan\"A\n\007PCBegin\022\036\n\004kind\030\001 \001(\0162\020.uif."
  "PCBeginKind\022\026\n\002pt\030\002 \001(\0132\n.uif.Point\"%\n\005P"
  "CEnd\022\034\n\004kind\030\001 \001(\0162\016.uif.PCEndKind\"\"\n\010PC"
  "LineTo\022\026\n\002pt\030\001 \001(\0132\n.uif.Point\"c\n\014PCCubi"
  "cCurve\022\034\n\010control1\030\001 \001(\0132\n.uif.Point\022\034\n\010"
  "control2\030\002 \001(\0132\n.uif.Point\022\027\n\003end\030\003 \001(\0132"
  "\n.uif.Point\"I\n\020PCQuadraticCurve\022\034\n\010contr"
  "ol1\030\001 \001(\0132\n.uif.Point\022\027\n\003end\030\002 \001(\0132\n.uif"
  ".Point\"\211\001\n\005PCArc\022\020\n\010x_radius\030\001 \001(\002\022\020\n\010y_"
  "radius\030\002 \001(\002\022\027\n\017x_axis_rotation\030\003 \001(\002\022\026\n"
  "\016large_arc_flag\030\004 \001(\010\022\022\n\nsweep_flag\030\005 \001("
  "\010\022\027\n\003end\030\006 \001(\0132\n.uif.Point\"\337\001\n\013PathComma"
  "nd\022\035\n\005begin\030\n \001(\0132\014.uif.PCBeginH\000\022\031\n\003end"
  "\030\024 \001(\0132\n.uif.PCEndH\000\022 \n\007line_to\030\013 \001(\0132\r."
  "uif.PCLineToH\000\022%\n\010cubic_to\030\014 \001(\0132\021.uif.P"
  "CCubicCurveH\000\022(\n\007quad_to\030\r \001(\0132\025.uif.PCQ"
  "uadraticCurveH\000\022\034\n\006arc_to\030\016 \001(\0132\n.uif.PC"
  "ArcH\000B\005\n\003cmd\"]\n\010PathNode\022\"\n\010commands\030\001 \003"
  "(\0132\020.uif.PathCommand\022\021\n\tis_filled\030\002 \001(\010\022"
  "\032\n\006stroke\030\003 \001(\0132\n.uif.Brush\"\013\n\tEmptyNode"
  "\",\n\014ClipRectNode\022\034\n\004rect\030\001 \001(\0132\016.uif.Rec"
  "tangle\"\207\003\n\013EditCommand\022\021\n\ttimestamp\030\005 \001("
  "\004\022\021\n\tclient_id\030\004 \001(\t\022\'\n\004kind\030\001 \001(\0162\031.uif"
  ".EditCommand.EditKind\022\021\n\tparent_id\030\002 \001(\004"
  "\022\021\n\tobject_id\030\003 \001(\004\022\"\n\004rect\030\n \001(\0132\022.uif."
  "RectangleNodeH\000\022\035\n\004text\030\013 \001(\0132\r.uif.Text"
  "NodeH\000\022\035\n\004path\030\014 \001(\0132\r.uif.PathNodeH\000\022\037\n"
  "\005empty\030\024 \001(\0132\016.uif.EmptyNodeH\000\022!\n\004clip\030\025"
  " \001(\0132\021.uif.ClipRectNodeH\000\"U\n\010EditKind\022\020\n"
  "\014APPEND_CHILD\020\000\022\020\n\014REPLACE_NODE\020\001\022\022\n\016CLE"
  "ANUP_CLIENT\020\002\022\021\n\rDELETE_OBJECT\020\003B\006\n\004node"
  "\"-\n\007EditReq\022\"\n\010commands\030\002 \003(\0132\020.uif.Edit"
  "Command\"\n\n\010EditResp\"!\n\014GetEventsReq\022\021\n\tc"
  "lient_id\030\001 \001(\t\"\034\n\nCloseEvent\022\016\n\006closed\030\001"
  " \001(\010\"l\n\nMouseEvent\022 \n\006button\030\001 \001(\0162\020.uif"
  ".MouseButton\022\036\n\005state\030\002 \001(\0162\017.uif.MouseS"
  "tate\022\034\n\010location\030\003 \001(\0132\n.uif.Point\"\?\n\rKe"
  "yboardEvent\022\034\n\005state\030\001 \001(\0162\r.uif.KeyStat"
  "e\022\020\n\010key_code\030\002 \001(\r\"a\n\014TextHitEvent\022\036\n\005m"
  "ouse\030\001 \001(\0132\017.uif.MouseEvent\022\016\n\006offset\030\002 "
  "\001(\r\022\016\n\006length\030\003 \001(\r\022\021\n\tobject_id\030\004 \001(\004\"\235"
  "\001\n\005Event\022 \n\005close\030\n \001(\0132\017.uif.CloseEvent"
  "H\000\022 \n\005mouse\030\013 \001(\0132\017.uif.MouseEventH\000\022!\n\003"
  "key\030\014 \001(\0132\022.uif.KeyboardEventH\000\022$\n\007textH"
  "it\030\r \001(\0132\021.uif.TextHitEventH\000B\007\n\005event\"\030"
  "\n\026GetServerPropertiesReq\"F\n\027GetServerPro"
  "pertiesResp\022\024\n\014window_width\030\001 \001(\r\022\025\n\rwin"
  "dow_height\030\002 \001(\r\"!\n\020SetClearColorReq\022\r\n\005"
  "color\030\001 \001(\r\"\023\n\021SetClearColorResp*Q\n\tFont"
  "Style\022\025\n\021FONT_STYLE_NORMAL\020\000\022\026\n\022FONT_STY"
  "LE_OBLIQUE\020\001\022\025\n\021FONT_STYLE_ITALIC\020\002*\310\002\n\n"
  "FontWeight\022\031\n\025FONT_WEIGHT_UNDEFINED\020\000\022\024\n"
  "\020FONT_WEIGHT_THIN\020d\022\034\n\027FONT_WEIGHT_EXTRA"
  "_LIGHT\020\310\001\022\026\n\021FONT_WEIGHT_LIGHT\020\254\002\022\033\n\026FON"
  "T_WEIGHT_SEMI_LIGHT\020\336\002\022\027\n\022FONT_WEIGHT_NO"
  "RMAL\020\220\003\022\027\n\022FONT_WEIGHT_MEDIUM\020\364\003\022\032\n\025FONT"
  "_WEIGHT_SEMI_BOLD\020\330\004\022\025\n\020FONT_WEIGHT_BOLD"
  "\020\274\005\022\033\n\026FONT_WEIGHT_EXTRA_BOLD\020\240\006\022\026\n\021FONT"
  "_WEIGHT_BLACK\020\204\007\022\034\n\027FONT_WEIGHT_EXTRA_BL"
  "ACK\020\266\007*\300\002\n\013FontStretch\022\032\n\026FONT_STRETCH_U"
  "NDEFINED\020\000\022 \n\034FONT_STRETCH_ULTRA_CONDENS"
  "ED\020\001\022 \n\034FONT_STRETCH_EXTRA_CONDENSED\020\002\022\032"
  "\n\026FONT_STRETCH_CONDENSED\020\003\022\037\n\033FONT_STRET"
  "CH_SEMI_CONDENSED\020\004\022\027\n\023FONT_STRETCH_NORM"
  "AL\020\005\022\036\n\032FONT_STRETCH_SEMI_EXPANDED\020\006\022\031\n\025"
  "FONT_STRETCH_EXPANDED\020\007\022\037\n\033FONT_STRETCH_"
  "EXTRA_EXPANDED\020\010\022\037\n\033FONT_STRETCH_ULTRA_E"
  "XPANDED\020\t*m\n\tTextAlign\022\026\n\022TEXT_ALIGN_LEA"
  "DING\020\000\022\027\n\023TEXT_ALIGN_TRAILING\020\001\022\025\n\021TEXT_"
  "ALIGN_CENTER\020\002\022\030\n\024TEXT_ALIGN_JUSTIFIED\020\003"
  "*_\n\016ParagraphAlign\022\030\n\024PARAGRAPH_ALIGN_NE"
  "AR\020\000\022\027\n\023PARAGRAPH_ALIGN_FAR\020\001\022\032\n\026PARAGRA"
  "PH_ALIGN_CENTER\020\002*\?\n\013PCBeginKind\022\027\n\023PC_B"
  "EGINKIND_FILLED\020\000\022\027\n\023PC_BEGINKIND_HOLLOW"
  "\020\001*7\n\tPCEndKind\022\023\n\017PC_ENDKIND_OPEN\020\000\022\025\n\021"
  "PC_ENDKIND_CLOSED\020\001*\226\001\n\013MouseButton\022\025\n\021M"
  "OUSE_BUTTON_NONE\020\000\022\025\n\021MOUSE_BUTTON_LEFT\020"
  "\001\022\027\n\023MOUSE_BUTTON_MIDDLE\020\002\022\026\n\022MOUSE_BUTT"
  "ON_RIGHT\020\003\022\023\n\017MOUSE_BUTTON_X1\020\004\022\023\n\017MOUSE"
  "_BUTTON_X2\020\005*L\n\nMouseState\022\024\n\020MOUSE_STAT"
  "E_NONE\020\000\022\022\n\016MOUSE_STATE_UP\020\001\022\024\n\020MOUSE_ST"
  "ATE_DOWN\020\002*/\n\010KeyState\022\t\n\005UNSET\020\000\022\014\n\010KEY"
  "_DOWN\020\001\022\n\n\006KEY_UP\020\0022\362\001\n\013UIFramework\022#\n\004E"
  "dit\022\014.uif.EditReq\032\r.uif.EditResp\022,\n\tGetE"
  "vents\022\021.uif.GetEventsReq\032\n.uif.Event0\001\022P"
  "\n\023GetServerProperties\022\033.uif.GetServerPro"
  "pertiesReq\032\034.uif.GetServerPropertiesResp"
  "\022>\n\rSetClearColor\022\025.uif.SetClearColorReq"
  "\032\026.uif.SetClearColorRespB#Z!github.com/V"
  "bitz/uif_shared/protob\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_uif_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_uif_2eproto = {
  false, false, 4749, descriptor_table_protodef_uif_2eproto, "uif.proto", 
  &descriptor_table_uif_2eproto_once, nullptr, 0, 32,
  schemas, file_default_instances, TableStruct_uif_2eproto::offsets,
  file_level_metadata_uif_2eproto, file_level_enum_descriptors_uif_2eproto, file_level_service_descriptors_uif_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_uif_2eproto_getter() {
  return &descriptor_table_uif_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_uif_2eproto(&descriptor_table_uif_2eproto);
namespace uif {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EditCommand_EditKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_uif_2eproto);
  return file_level_enum_descriptors_uif_2eproto[0];
}
bool EditCommand_EditKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr EditCommand_EditKind EditCommand::APPEND_CHILD;
constexpr EditCommand_EditKind EditCommand::REPLACE_NODE;
constexpr EditCommand_EditKind EditCommand::CLEANUP_CLIENT;
constexpr EditCommand_EditKind EditCommand::DELETE_OBJECT;
constexpr EditCommand_EditKind EditCommand::EditKind_MIN;
constexpr EditCommand_EditKind EditCommand::EditKind_MAX;
constexpr int EditCommand::EditKind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FontStyle_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_uif_2eproto);
  return file_level_enum_descriptors_uif_2eproto[1];
}
bool FontStyle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FontWeight_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_uif_2eproto);
  return file_level_enum_descriptors_uif_2eproto[2];
}
bool FontWeight_IsValid(int value) {
  switch (value) {
    case 0:
    case 100:
    case 200:
    case 300:
    case 350:
    case 400:
    case 500:
    case 600:
    case 700:
    case 800:
    case 900:
    case 950:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FontStretch_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_uif_2eproto);
  return file_level_enum_descriptors_uif_2eproto[3];
}
bool FontStretch_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TextAlign_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_uif_2eproto);
  return file_level_enum_descriptors_uif_2eproto[4];
}
bool TextAlign_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParagraphAlign_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_uif_2eproto);
  return file_level_enum_descriptors_uif_2eproto[5];
}
bool ParagraphAlign_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PCBeginKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_uif_2eproto);
  return file_level_enum_descriptors_uif_2eproto[6];
}
bool PCBeginKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PCEndKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_uif_2eproto);
  return file_level_enum_descriptors_uif_2eproto[7];
}
bool PCEndKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MouseButton_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_uif_2eproto);
  return file_level_enum_descriptors_uif_2eproto[8];
}
bool MouseButton_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MouseState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_uif_2eproto);
  return file_level_enum_descriptors_uif_2eproto[9];
}
bool MouseState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KeyState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_uif_2eproto);
  return file_level_enum_descriptors_uif_2eproto[10];
}
bool KeyState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Point::_Internal {
 public:
};

Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:uif.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:uif.Point)
}

inline void Point::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:uif.Point)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Point::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Point::ArenaDtor(void* object) {
  Point* _this = reinterpret_cast< Point* >(object);
  (void)_this;
}
void Point::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:uif.Point)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Point::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uif.Point)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uif.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uif.Point)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Point::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Point::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Point::GetClassData() const { return &_class_data_; }

void Point::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Point *>(to)->MergeFrom(
      static_cast<const Point &>(from));
}


void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uif.Point)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uif.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, y_)
      + sizeof(Point::y_)
      - PROTOBUF_FIELD_OFFSET(Point, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_uif_2eproto_getter, &descriptor_table_uif_2eproto_once,
      file_level_metadata_uif_2eproto[0]);
}

// ===================================================================

class Rectangle::_Internal {
 public:
};

Rectangle::Rectangle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:uif.Rectangle)
}
Rectangle::Rectangle(const Rectangle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&x_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:uif.Rectangle)
}

inline void Rectangle::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&x_)) + sizeof(height_));
}

Rectangle::~Rectangle() {
  // @@protoc_insertion_point(destructor:uif.Rectangle)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Rectangle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Rectangle::ArenaDtor(void* object) {
  Rectangle* _this = reinterpret_cast< Rectangle* >(object);
  (void)_this;
}
void Rectangle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Rectangle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Rectangle::Clear() {
// @@protoc_insertion_point(message_clear_start:uif.Rectangle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&x_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rectangle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Rectangle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uif.Rectangle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float width = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_width = this->_internal_width();
  uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_width(), target);
  }

  // float height = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uif.Rectangle)
  return target;
}

size_t Rectangle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uif.Rectangle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float width = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_width = this->_internal_width();
  uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    total_size += 1 + 4;
  }

  // float height = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rectangle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Rectangle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rectangle::GetClassData() const { return &_class_data_; }

void Rectangle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Rectangle *>(to)->MergeFrom(
      static_cast<const Rectangle &>(from));
}


void Rectangle::MergeFrom(const Rectangle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uif.Rectangle)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_width = from._internal_width();
  uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    _internal_set_width(from._internal_width());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height = from._internal_height();
  uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rectangle::CopyFrom(const Rectangle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uif.Rectangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rectangle::IsInitialized() const {
  return true;
}

void Rectangle::InternalSwap(Rectangle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rectangle, height_)
      + sizeof(Rectangle::height_)
      - PROTOBUF_FIELD_OFFSET(Rectangle, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rectangle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_uif_2eproto_getter, &descriptor_table_uif_2eproto_once,
      file_level_metadata_uif_2eproto[1]);
}

// ===================================================================

class SolidBrush::_Internal {
 public:
};

SolidBrush::SolidBrush(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:uif.SolidBrush)
}
SolidBrush::SolidBrush(const SolidBrush& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  color_ = from.color_;
  // @@protoc_insertion_point(copy_constructor:uif.SolidBrush)
}

inline void SolidBrush::SharedCtor() {
color_ = 0u;
}

SolidBrush::~SolidBrush() {
  // @@protoc_insertion_point(destructor:uif.SolidBrush)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SolidBrush::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SolidBrush::ArenaDtor(void* object) {
  SolidBrush* _this = reinterpret_cast< SolidBrush* >(object);
  (void)_this;
}
void SolidBrush::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SolidBrush::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SolidBrush::Clear() {
// @@protoc_insertion_point(message_clear_start:uif.SolidBrush)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  color_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SolidBrush::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SolidBrush::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uif.SolidBrush)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 color = 1;
  if (this->_internal_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uif.SolidBrush)
  return target;
}

size_t SolidBrush::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uif.SolidBrush)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 color = 1;
  if (this->_internal_color() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_color());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SolidBrush::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SolidBrush::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SolidBrush::GetClassData() const { return &_class_data_; }

void SolidBrush::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SolidBrush *>(to)->MergeFrom(
      static_cast<const SolidBrush &>(from));
}


void SolidBrush::MergeFrom(const SolidBrush& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uif.SolidBrush)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_color() != 0) {
    _internal_set_color(from._internal_color());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SolidBrush::CopyFrom(const SolidBrush& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uif.SolidBrush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolidBrush::IsInitialized() const {
  return true;
}

void SolidBrush::InternalSwap(SolidBrush* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(color_, other->color_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SolidBrush::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_uif_2eproto_getter, &descriptor_table_uif_2eproto_once,
      file_level_metadata_uif_2eproto[2]);
}

// ===================================================================

class GradientStop::_Internal {
 public:
};

GradientStop::GradientStop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:uif.GradientStop)
}
GradientStop::GradientStop(const GradientStop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&color_, &from.color_,
    static_cast<size_t>(reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&color_)) + sizeof(position_));
  // @@protoc_insertion_point(copy_constructor:uif.GradientStop)
}

inline void GradientStop::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&color_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&color_)) + sizeof(position_));
}

GradientStop::~GradientStop() {
  // @@protoc_insertion_point(destructor:uif.GradientStop)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GradientStop::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GradientStop::ArenaDtor(void* object) {
  GradientStop* _this = reinterpret_cast< GradientStop* >(object);
  (void)_this;
}
void GradientStop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GradientStop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GradientStop::Clear() {
// @@protoc_insertion_point(message_clear_start:uif.GradientStop)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&color_)) + sizeof(position_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GradientStop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GradientStop::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uif.GradientStop)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 color = 1;
  if (this->_internal_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_color(), target);
  }

  // float position = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position = this->_internal_position();
  uint32_t raw_position;
  memcpy(&raw_position, &tmp_position, sizeof(tmp_position));
  if (raw_position != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uif.GradientStop)
  return target;
}

size_t GradientStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uif.GradientStop)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 color = 1;
  if (this->_internal_color() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_color());
  }

  // float position = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position = this->_internal_position();
  uint32_t raw_position;
  memcpy(&raw_position, &tmp_position, sizeof(tmp_position));
  if (raw_position != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GradientStop::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GradientStop::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GradientStop::GetClassData() const { return &_class_data_; }

void GradientStop::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GradientStop *>(to)->MergeFrom(
      static_cast<const GradientStop &>(from));
}


void GradientStop::MergeFrom(const GradientStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uif.GradientStop)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_color() != 0) {
    _internal_set_color(from._internal_color());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position = from._internal_position();
  uint32_t raw_position;
  memcpy(&raw_position, &tmp_position, sizeof(tmp_position));
  if (raw_position != 0) {
    _internal_set_position(from._internal_position());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GradientStop::CopyFrom(const GradientStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uif.GradientStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GradientStop::IsInitialized() const {
  return true;
}

void GradientStop::InternalSwap(GradientStop* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GradientStop, position_)
      + sizeof(GradientStop::position_)
      - PROTOBUF_FIELD_OFFSET(GradientStop, color_)>(
          reinterpret_cast<char*>(&color_),
          reinterpret_cast<char*>(&other->color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GradientStop::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_uif_2eproto_getter, &descriptor_table_uif_2eproto_once,
      file_level_metadata_uif_2eproto[3]);
}

// ===================================================================

class LinearGradientBrush::_Internal {
 public:
  static const ::uif::Point& start(const LinearGradientBrush* msg);
  static const ::uif::Point& end(const LinearGradientBrush* msg);
};

const ::uif::Point&
LinearGradientBrush::_Internal::start(const LinearGradientBrush* msg) {
  return *msg->start_;
}
const ::uif::Point&
LinearGradientBrush::_Internal::end(const LinearGradientBrush* msg) {
  return *msg->end_;
}
LinearGradientBrush::LinearGradientBrush(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  stops_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:uif.LinearGradientBrush)
}
LinearGradientBrush::LinearGradientBrush(const LinearGradientBrush& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stops_(from.stops_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start()) {
    start_ = new ::uif::Point(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from._internal_has_end()) {
    end_ = new ::uif::Point(*from.end_);
  } else {
    end_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:uif.LinearGradientBrush)
}

inline void LinearGradientBrush::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

LinearGradientBrush::~LinearGradientBrush() {
  // @@protoc_insertion_point(destructor:uif.LinearGradientBrush)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LinearGradientBrush::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
}

void LinearGradientBrush::ArenaDtor(void* object) {
  LinearGradientBrush* _this = reinterpret_cast< LinearGradientBrush* >(object);
  (void)_this;
}
void LinearGradientBrush::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinearGradientBrush::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LinearGradientBrush::Clear() {
// @@protoc_insertion_point(message_clear_start:uif.LinearGradientBrush)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stops_.Clear();
  if (GetArenaForAllocation() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
  if (GetArenaForAllocation() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinearGradientBrush::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .uif.GradientStop stops = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .uif.Point start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uif.Point end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LinearGradientBrush::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uif.LinearGradientBrush)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .uif.GradientStop stops = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stops_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_stops(i), target, stream);
  }

  // .uif.Point start = 2;
  if (this->_internal_has_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start(this), target, stream);
  }

  // .uif.Point end = 3;
  if (this->_internal_has_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::end(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uif.LinearGradientBrush)
  return target;
}

size_t LinearGradientBrush::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uif.LinearGradientBrush)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .uif.GradientStop stops = 1;
  total_size += 1UL * this->_internal_stops_size();
  for (const auto& msg : this->stops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .uif.Point start = 2;
  if (this->_internal_has_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_);
  }

  // .uif.Point end = 3;
  if (this->_internal_has_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LinearGradientBrush::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LinearGradientBrush::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LinearGradientBrush::GetClassData() const { return &_class_data_; }

void LinearGradientBrush::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LinearGradientBrush *>(to)->MergeFrom(
      static_cast<const LinearGradientBrush &>(from));
}


void LinearGradientBrush::MergeFrom(const LinearGradientBrush& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uif.LinearGradientBrush)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  stops_.MergeFrom(from.stops_);
  if (from._internal_has_start()) {
    _internal_mutable_start()->::uif::Point::MergeFrom(from._internal_start());
  }
  if (from._internal_has_end()) {
    _internal_mutable_end()->::uif::Point::MergeFrom(from._internal_end());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LinearGradientBrush::CopyFrom(const LinearGradientBrush& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uif.LinearGradientBrush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinearGradientBrush::IsInitialized() const {
  return true;
}

void LinearGradientBrush::InternalSwap(LinearGradientBrush* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  stops_.InternalSwap(&other->stops_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LinearGradientBrush, end_)
      + sizeof(LinearGradientBrush::end_)
      - PROTOBUF_FIELD_OFFSET(LinearGradientBrush, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LinearGradientBrush::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_uif_2eproto_getter, &descriptor_table_uif_2eproto_once,
      file_level_metadata_uif_2eproto[4]);
}

// ===================================================================

class Brush::_Internal {
 public:
  static const ::uif::SolidBrush& solid(const Brush* msg);
  static const ::uif::LinearGradientBrush& linear(const Brush* msg);
};

const ::uif::SolidBrush&
Brush::_Internal::solid(const Brush* msg) {
  return *msg->kind_.solid_;
}
const ::uif::LinearGradientBrush&
Brush::_Internal::linear(const Brush* msg) {
  return *msg->kind_.linear_;
}
void Brush::set_allocated_solid(::uif::SolidBrush* solid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (solid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::uif::SolidBrush>::GetOwningArena(solid);
    if (message_arena != submessage_arena) {
      solid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, solid, submessage_arena);
    }
    set_has_solid();
    kind_.solid_ = solid;
  }
  // @@protoc_insertion_point(field_set_allocated:uif.Brush.solid)
}
void Brush::set_allocated_linear(::uif::LinearGradientBrush* linear) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (linear) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::uif::LinearGradientBrush>::GetOwningArena(linear);
    if (message_arena != submessage_arena) {
      linear = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear, submessage_arena);
    }
    set_has_linear();
    kind_.linear_ = linear;
  }
  // @@protoc_insertion_point(field_set_allocated:uif.Brush.linear)
}
Brush::Brush(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:uif.Brush)
}
Brush::Brush(const Brush& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_kind();
  switch (from.kind_case()) {
    case kSolid: {
      _internal_mutable_solid()->::uif::SolidBrush::MergeFrom(from._internal_solid());
      break;
    }
    case kLinear: {
      _internal_mutable_linear()->::uif::LinearGradientBrush::MergeFrom(from._internal_linear());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:uif.Brush)
}

inline void Brush::SharedCtor() {
clear_has_kind();
}

Brush::~Brush() {
  // @@protoc_insertion_point(destructor:uif.Brush)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Brush::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_kind()) {
    clear_kind();
  }
}

void Brush::ArenaDtor(void* object) {
  Brush* _this = reinterpret_cast< Brush* >(object);
  (void)_this;
}
void Brush::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Brush::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Brush::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:uif.Brush)
  switch (kind_case()) {
    case kSolid: {
      if (GetArenaForAllocation() == nullptr) {
        delete kind_.solid_;
      }
      break;
    }
    case kLinear: {
      if (GetArenaForAllocation() == nullptr) {
        delete kind_.linear_;
      }
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KIND_NOT_SET;
}


void Brush::Clear() {
// @@protoc_insertion_point(message_clear_start:uif.Brush)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Brush::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .uif.SolidBrush solid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_solid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uif.LinearGradientBrush linear = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Brush::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uif.Brush)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .uif.SolidBrush solid = 1;
  if (_internal_has_solid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::solid(this), target, stream);
  }

  // .uif.LinearGradientBrush linear = 2;
  if (_internal_has_linear()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::linear(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uif.Brush)
  return target;
}

size_t Brush::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uif.Brush)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (kind_case()) {
    // .uif.SolidBrush solid = 1;
    case kSolid: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.solid_);
      break;
    }
    // .uif.LinearGradientBrush linear = 2;
    case kLinear: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.linear_);
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Brush::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Brush::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Brush::GetClassData() const { return &_class_data_; }

void Brush::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Brush *>(to)->MergeFrom(
      static_cast<const Brush &>(from));
}


void Brush::MergeFrom(const Brush& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uif.Brush)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.kind_case()) {
    case kSolid: {
      _internal_mutable_solid()->::uif::SolidBrush::MergeFrom(from._internal_solid());
      break;
    }
    case kLinear: {
      _internal_mutable_linear()->::uif::LinearGradientBrush::MergeFrom(from._internal_linear());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Brush::CopyFrom(const Brush& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uif.Brush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brush::IsInitialized() const {
  return true;
}

void Brush::InternalSwap(Brush* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(kind_, other->kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Brush::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_uif_2eproto_getter, &descriptor_table_uif_2eproto_once,
      file_level_metadata_uif_2eproto[5]);
}

// ===================================================================

class RectangleNode::_Internal {
 public:
  static const ::uif::Rectangle& rect(const RectangleNode* msg);
  static const ::uif::Brush& stroke(const RectangleNode* msg);
};

const ::uif::Rectangle&
RectangleNode::_Internal::rect(const RectangleNode* msg) {
  return *msg->rect_;
}
const ::uif::Brush&
RectangleNode::_Internal::stroke(const RectangleNode* msg) {
  return *msg->stroke_;
}
RectangleNode::RectangleNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:uif.RectangleNode)
}
RectangleNode::RectangleNode(const RectangleNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rect()) {
    rect_ = new ::uif::Rectangle(*from.rect_);
  } else {
    rect_ = nullptr;
  }
  if (from._internal_has_stroke()) {
    stroke_ = new ::uif::Brush(*from.stroke_);
  } else {
    stroke_ = nullptr;
  }
  ::memcpy(&filled_, &from.filled_,
    static_cast<size_t>(reinterpret_cast<char*>(&rounded_radius_y_) -
    reinterpret_cast<char*>(&filled_)) + sizeof(rounded_radius_y_));
  // @@protoc_insertion_point(copy_constructor:uif.RectangleNode)
}

inline void RectangleNode::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rect_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rounded_radius_y_) -
    reinterpret_cast<char*>(&rect_)) + sizeof(rounded_radius_y_));
}

RectangleNode::~RectangleNode() {
  // @@protoc_insertion_point(destructor:uif.RectangleNode)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RectangleNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete rect_;
  if (this != internal_default_instance()) delete stroke_;
}

void RectangleNode::ArenaDtor(void* object) {
  RectangleNode* _this = reinterpret_cast< RectangleNode* >(object);
  (void)_this;
}
void RectangleNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RectangleNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RectangleNode::Clear() {
// @@protoc_insertion_point(message_clear_start:uif.RectangleNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && rect_ != nullptr) {
    delete rect_;
  }
  rect_ = nullptr;
  if (GetArenaForAllocation() == nullptr && stroke_ != nullptr) {
    delete stroke_;
  }
  stroke_ = nullptr;
  ::memset(&filled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rounded_radius_y_) -
      reinterpret_cast<char*>(&filled_)) + sizeof(rounded_radius_y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RectangleNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .uif.Rectangle rect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rect(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uif.Brush stroke = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool filled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          filled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float rounded_radius_x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          rounded_radius_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float rounded_radius_y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          rounded_radius_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RectangleNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uif.RectangleNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .uif.Rectangle rect = 1;
  if (this->_internal_has_rect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rect(this), target, stream);
  }

  // .uif.Brush stroke = 2;
  if (this->_internal_has_stroke()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stroke(this), target, stream);
  }

  // bool filled = 3;
  if (this->_internal_filled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_filled(), target);
  }

  // float rounded_radius_x = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rounded_radius_x = this->_internal_rounded_radius_x();
  uint32_t raw_rounded_radius_x;
  memcpy(&raw_rounded_radius_x, &tmp_rounded_radius_x, sizeof(tmp_rounded_radius_x));
  if (raw_rounded_radius_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_rounded_radius_x(), target);
  }

  // float rounded_radius_y = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rounded_radius_y = this->_internal_rounded_radius_y();
  uint32_t raw_rounded_radius_y;
  memcpy(&raw_rounded_radius_y, &tmp_rounded_radius_y, sizeof(tmp_rounded_radius_y));
  if (raw_rounded_radius_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_rounded_radius_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uif.RectangleNode)
  return target;
}

size_t RectangleNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uif.RectangleNode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .uif.Rectangle rect = 1;
  if (this->_internal_has_rect()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rect_);
  }

  // .uif.Brush stroke = 2;
  if (this->_internal_has_stroke()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stroke_);
  }

  // bool filled = 3;
  if (this->_internal_filled() != 0) {
    total_size += 1 + 1;
  }

  // float rounded_radius_x = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rounded_radius_x = this->_internal_rounded_radius_x();
  uint32_t raw_rounded_radius_x;
  memcpy(&raw_rounded_radius_x, &tmp_rounded_radius_x, sizeof(tmp_rounded_radius_x));
  if (raw_rounded_radius_x != 0) {
    total_size += 1 + 4;
  }

  // float rounded_radius_y = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rounded_radius_y = this->_internal_rounded_radius_y();
  uint32_t raw_rounded_radius_y;
  memcpy(&raw_rounded_radius_y, &tmp_rounded_radius_y, sizeof(tmp_rounded_radius_y));
  if (raw_rounded_radius_y != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RectangleNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RectangleNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RectangleNode::GetClassData() const { return &_class_data_; }

void RectangleNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RectangleNode *>(to)->MergeFrom(
      static_cast<const RectangleNode &>(from));
}


void RectangleNode::MergeFrom(const RectangleNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uif.RectangleNode)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_rect()) {
    _internal_mutable_rect()->::uif::Rectangle::MergeFrom(from._internal_rect());
  }
  if (from._internal_has_stroke()) {
    _internal_mutable_stroke()->::uif::Brush::MergeFrom(from._internal_stroke());
  }
  if (from._internal_filled() != 0) {
    _internal_set_filled(from._internal_filled());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rounded_radius_x = from._internal_rounded_radius_x();
  uint32_t raw_rounded_radius_x;
  memcpy(&raw_rounded_radius_x, &tmp_rounded_radius_x, sizeof(tmp_rounded_radius_x));
  if (raw_rounded_radius_x != 0) {
    _internal_set_rounded_radius_x(from._internal_rounded_radius_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rounded_radius_y = from._internal_rounded_radius_y();
  uint32_t raw_rounded_radius_y;
  memcpy(&raw_rounded_radius_y, &tmp_rounded_radius_y, sizeof(tmp_rounded_radius_y));
  if (raw_rounded_radius_y != 0) {
    _internal_set_rounded_radius_y(from._internal_rounded_radius_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RectangleNode::CopyFrom(const RectangleNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uif.RectangleNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RectangleNode::IsInitialized() const {
  return true;
}

void RectangleNode::InternalSwap(RectangleNode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RectangleNode, rounded_radius_y_)
      + sizeof(RectangleNode::rounded_radius_y_)
      - PROTOBUF_FIELD_OFFSET(RectangleNode, rect_)>(
          reinterpret_cast<char*>(&rect_),
          reinterpret_cast<char*>(&other->rect_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RectangleNode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_uif_2eproto_getter, &descriptor_table_uif_2eproto_once,
      file_level_metadata_uif_2eproto[6]);
}

// ===================================================================

class TextEditSpan::_Internal {
 public:
  static const ::uif::Brush& brush(const TextEditSpan* msg);
};

const ::uif::Brush&
TextEditSpan::_Internal::brush(const TextEditSpan* msg) {
  return *msg->edit_.brush_;
}
void TextEditSpan::set_allocated_brush(::uif::Brush* brush) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_edit();
  if (brush) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::uif::Brush>::GetOwningArena(brush);
    if (message_arena != submessage_arena) {
      brush = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brush, submessage_arena);
    }
    set_has_brush();
    edit_.brush_ = brush;
  }
  // @@protoc_insertion_point(field_set_allocated:uif.TextEditSpan.brush)
}
TextEditSpan::TextEditSpan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:uif.TextEditSpan)
}
TextEditSpan::TextEditSpan(const TextEditSpan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(length_));
  clear_has_edit();
  switch (from.edit_case()) {
    case kFontName: {
      _internal_set_font_name(from._internal_font_name());
      break;
    }
    case kFontWeight: {
      _internal_set_font_weight(from._internal_font_weight());
      break;
    }
    case kFontStyle: {
      _internal_set_font_style(from._internal_font_style());
      break;
    }
    case kFontStretch: {
      _internal_set_font_stretch(from._internal_font_stretch());
      break;
    }
    case kFontSize: {
      _internal_set_font_size(from._internal_font_size());
      break;
    }
    case kBrush: {
      _internal_mutable_brush()->::uif::Brush::MergeFrom(from._internal_brush());
      break;
    }
    case kUnderline: {
      _internal_set_underline(from._internal_underline());
      break;
    }
    case EDIT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:uif.TextEditSpan)
}

inline void TextEditSpan::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(length_));
clear_has_edit();
}

TextEditSpan::~TextEditSpan() {
  // @@protoc_insertion_point(destructor:uif.TextEditSpan)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TextEditSpan::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_edit()) {
    clear_edit();
  }
}

void TextEditSpan::ArenaDtor(void* object) {
  TextEditSpan* _this = reinterpret_cast< TextEditSpan* >(object);
  (void)_this;
}
void TextEditSpan::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextEditSpan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TextEditSpan::clear_edit() {
// @@protoc_insertion_point(one_of_clear_start:uif.TextEditSpan)
  switch (edit_case()) {
    case kFontName: {
      edit_.font_name_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kFontWeight: {
      // No need to clear
      break;
    }
    case kFontStyle: {
      // No need to clear
      break;
    }
    case kFontStretch: {
      // No need to clear
      break;
    }
    case kFontSize: {
      // No need to clear
      break;
    }
    case kBrush: {
      if (GetArenaForAllocation() == nullptr) {
        delete edit_.brush_;
      }
      break;
    }
    case kUnderline: {
      // No need to clear
      break;
    }
    case EDIT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EDIT_NOT_SET;
}


void TextEditSpan::Clear() {
// @@protoc_insertion_point(message_clear_start:uif.TextEditSpan)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(length_));
  clear_edit();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextEditSpan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string font_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_font_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "uif.TextEditSpan.font_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uif.FontWeight font_weight = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_font_weight(static_cast<::uif::FontWeight>(val));
        } else
          goto handle_unusual;
        continue;
      // .uif.FontStyle font_style = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_font_style(static_cast<::uif::FontStyle>(val));
        } else
          goto handle_unusual;
        continue;
      // .uif.FontStretch font_stretch = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_font_stretch(static_cast<::uif::FontStretch>(val));
        } else
          goto handle_unusual;
        continue;
      // float font_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _internal_set_font_size(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .uif.Brush brush = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_brush(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool underline = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _internal_set_underline(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TextEditSpan::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uif.TextEditSpan)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 offset = 1;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_offset(), target);
  }

  // int32 length = 2;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_length(), target);
  }

  // string font_name = 4;
  if (_internal_has_font_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_font_name().data(), static_cast<int>(this->_internal_font_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "uif.TextEditSpan.font_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_font_name(), target);
  }

  // .uif.FontWeight font_weight = 5;
  if (_internal_has_font_weight()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_font_weight(), target);
  }

  // .uif.FontStyle font_style = 6;
  if (_internal_has_font_style()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_font_style(), target);
  }

  // .uif.FontStretch font_stretch = 7;
  if (_internal_has_font_stretch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_font_stretch(), target);
  }

  // float font_size = 8;
  if (_internal_has_font_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_font_size(), target);
  }

  // .uif.Brush brush = 9;
  if (_internal_has_brush()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::brush(this), target, stream);
  }

  // bool underline = 10;
  if (_internal_has_underline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_underline(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uif.TextEditSpan)
  return target;
}

size_t TextEditSpan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uif.TextEditSpan)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 offset = 1;
  if (this->_internal_offset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_offset());
  }

  // int32 length = 2;
  if (this->_internal_length() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_length());
  }

  switch (edit_case()) {
    // string font_name = 4;
    case kFontName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_font_name());
      break;
    }
    // .uif.FontWeight font_weight = 5;
    case kFontWeight: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_font_weight());
      break;
    }
    // .uif.FontStyle font_style = 6;
    case kFontStyle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_font_style());
      break;
    }
    // .uif.FontStretch font_stretch = 7;
    case kFontStretch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_font_stretch());
      break;
    }
    // float font_size = 8;
    case kFontSize: {
      total_size += 1 + 4;
      break;
    }
    // .uif.Brush brush = 9;
    case kBrush: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *edit_.brush_);
      break;
    }
    // bool underline = 10;
    case kUnderline: {
      total_size += 1 + 1;
      break;
    }
    case EDIT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TextEditSpan::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TextEditSpan::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TextEditSpan::GetClassData() const { return &_class_data_; }

void TextEditSpan::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TextEditSpan *>(to)->MergeFrom(
      static_cast<const TextEditSpan &>(from));
}


void TextEditSpan::MergeFrom(const TextEditSpan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uif.TextEditSpan)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from._internal_length() != 0) {
    _internal_set_length(from._internal_length());
  }
  switch (from.edit_case()) {
    case kFontName: {
      _internal_set_font_name(from._internal_font_name());
      break;
    }
    case kFontWeight: {
      _internal_set_font_weight(from._internal_font_weight());
      break;
    }
    case kFontStyle: {
      _internal_set_font_style(from._internal_font_style());
      break;
    }
    case kFontStretch: {
      _internal_set_font_stretch(from._internal_font_stretch());
      break;
    }
    case kFontSize: {
      _internal_set_font_size(from._internal_font_size());
      break;
    }
    case kBrush: {
      _internal_mutable_brush()->::uif::Brush::MergeFrom(from._internal_brush());
      break;
    }
    case kUnderline: {
      _internal_set_underline(from._internal_underline());
      break;
    }
    case EDIT_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TextEditSpan::CopyFrom(const TextEditSpan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uif.TextEditSpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextEditSpan::IsInitialized() const {
  return true;
}

void TextEditSpan::InternalSwap(TextEditSpan* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TextEditSpan, length_)
      + sizeof(TextEditSpan::length_)
      - PROTOBUF_FIELD_OFFSET(TextEditSpan, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
  swap(edit_, other->edit_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TextEditSpan::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_uif_2eproto_getter, &descriptor_table_uif_2eproto_once,
      file_level_metadata_uif_2eproto[7]);
}

// ===================================================================

class TextNode::_Internal {
 public:
  static const ::uif::Rectangle& bounds(const TextNode* msg);
  static const ::uif::Brush& stroke(const TextNode* msg);
};

const ::uif::Rectangle&
TextNode::_Internal::bounds(const TextNode* msg) {
  return *msg->bounds_;
}
const ::uif::Brush&
TextNode::_Internal::stroke(const TextNode* msg) {
  return *msg->stroke_;
}
TextNode::TextNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  edit_spans_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:uif.TextNode)
}
TextNode::TextNode(const TextNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      edit_spans_(from.edit_spans_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArenaForAllocation());
  }
  font_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    font_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_font_name().empty()) {
    font_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_font_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_bounds()) {
    bounds_ = new ::uif::Rectangle(*from.bounds_);
  } else {
    bounds_ = nullptr;
  }
  if (from._internal_has_stroke()) {
    stroke_ = new ::uif::Brush(*from.stroke_);
  } else {
    stroke_ = nullptr;
  }
  ::memcpy(&font_weight_, &from.font_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&paragraph_align_) -
    reinterpret_cast<char*>(&font_weight_)) + sizeof(paragraph_align_));
  // @@protoc_insertion_point(copy_constructor:uif.TextNode)
}

inline void TextNode::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
font_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  font_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bounds_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&paragraph_align_) -
    reinterpret_cast<char*>(&bounds_)) + sizeof(paragraph_align_));
}

TextNode::~TextNode() {
  // @@protoc_insertion_point(destructor:uif.TextNode)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TextNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  font_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bounds_;
  if (this != internal_default_instance()) delete stroke_;
}

void TextNode::ArenaDtor(void* object) {
  TextNode* _this = reinterpret_cast< TextNode* >(object);
  (void)_this;
}
void TextNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TextNode::Clear() {
// @@protoc_insertion_point(message_clear_start:uif.TextNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  edit_spans_.Clear();
  text_.ClearToEmpty();
  font_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && bounds_ != nullptr) {
    delete bounds_;
  }
  bounds_ = nullptr;
  if (GetArenaForAllocation() == nullptr && stroke_ != nullptr) {
    delete stroke_;
  }
  stroke_ = nullptr;
  ::memset(&font_weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&paragraph_align_) -
      reinterpret_cast<char*>(&font_weight_)) + sizeof(paragraph_align_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .uif.Rectangle bounds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bounds(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uif.Brush stroke = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "uif.TextNode.text"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string font_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_font_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "uif.TextNode.font_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uif.FontWeight font_weight = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_font_weight(static_cast<::uif::FontWeight>(val));
        } else
          goto handle_unusual;
        continue;
      // .uif.FontStyle font_style = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_font_style(static_cast<::uif::FontStyle>(val));
        } else
          goto handle_unusual;
        continue;
      // .uif.FontStretch font_stretch = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_font_stretch(static_cast<::uif::FontStretch>(val));
        } else
          goto handle_unusual;
        continue;
      // float font_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          font_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .uif.TextAlign text_align = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_text_align(static_cast<::uif::TextAlign>(val));
        } else
          goto handle_unusual;
        continue;
      // .uif.ParagraphAlign paragraph_align = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_paragraph_align(static_cast<::uif::ParagraphAlign>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .uif.TextEditSpan edit_spans = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edit_spans(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TextNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uif.TextNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .uif.Rectangle bounds = 1;
  if (this->_internal_has_bounds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bounds(this), target, stream);
  }

  // .uif.Brush stroke = 2;
  if (this->_internal_has_stroke()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stroke(this), target, stream);
  }

  // string text = 3;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "uif.TextNode.text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_text(), target);
  }

  // string font_name = 4;
  if (!this->_internal_font_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_font_name().data(), static_cast<int>(this->_internal_font_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "uif.TextNode.font_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_font_name(), target);
  }

  // .uif.FontWeight font_weight = 5;
  if (this->_internal_font_weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_font_weight(), target);
  }

  // .uif.FontStyle font_style = 6;
  if (this->_internal_font_style() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_font_style(), target);
  }

  // .uif.FontStretch font_stretch = 7;
  if (this->_internal_font_stretch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_font_stretch(), target);
  }

  // float font_size = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_font_size = this->_internal_font_size();
  uint32_t raw_font_size;
  memcpy(&raw_font_size, &tmp_font_size, sizeof(tmp_font_size));
  if (raw_font_size != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_font_size(), target);
  }

  // .uif.TextAlign text_align = 9;
  if (this->_internal_text_align() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_text_align(), target);
  }

  // .uif.ParagraphAlign paragraph_align = 10;
  if (this->_internal_paragraph_align() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_paragraph_align(), target);
  }

  // repeated .uif.TextEditSpan edit_spans = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_edit_spans_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_edit_spans(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uif.TextNode)
  return target;
}

size_t TextNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uif.TextNode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .uif.TextEditSpan edit_spans = 11;
  total_size += 1UL * this->_internal_edit_spans_size();
  for (const auto& msg : this->edit_spans_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string text = 3;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // string font_name = 4;
  if (!this->_internal_font_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_font_name());
  }

  // .uif.Rectangle bounds = 1;
  if (this->_internal_has_bounds()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bounds_);
  }

  // .uif.Brush stroke = 2;
  if (this->_internal_has_stroke()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stroke_);
  }

  // .uif.FontWeight font_weight = 5;
  if (this->_internal_font_weight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_font_weight());
  }

  // .uif.FontStyle font_style = 6;
  if (this->_internal_font_style() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_font_style());
  }

  // .uif.FontStretch font_stretch = 7;
  if (this->_internal_font_stretch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_font_stretch());
  }

  // float font_size = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_font_size = this->_internal_font_size();
  uint32_t raw_font_size;
  memcpy(&raw_font_size, &tmp_font_size, sizeof(tmp_font_size));
  if (raw_font_size != 0) {
    total_size += 1 + 4;
  }

  // .uif.TextAlign text_align = 9;
  if (this->_internal_text_align() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_text_align());
  }

  // .uif.ParagraphAlign paragraph_align = 10;
  if (this->_internal_paragraph_align() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_paragraph_align());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TextNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TextNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TextNode::GetClassData() const { return &_class_data_; }

void TextNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TextNode *>(to)->MergeFrom(
      static_cast<const TextNode &>(from));
}


void TextNode::MergeFrom(const TextNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uif.TextNode)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  edit_spans_.MergeFrom(from.edit_spans_);
  if (!from._internal_text().empty()) {
    _internal_set_text(from._internal_text());
  }
  if (!from._internal_font_name().empty()) {
    _internal_set_font_name(from._internal_font_name());
  }
  if (from._internal_has_bounds()) {
    _internal_mutable_bounds()->::uif::Rectangle::MergeFrom(from._internal_bounds());
  }
  if (from._internal_has_stroke()) {
    _internal_mutable_stroke()->::uif::Brush::MergeFrom(from._internal_stroke());
  }
  if (from._internal_font_weight() != 0) {
    _internal_set_font_weight(from._internal_font_weight());
  }
  if (from._internal_font_style() != 0) {
    _internal_set_font_style(from._internal_font_style());
  }
  if (from._internal_font_stretch() != 0) {
    _internal_set_font_stretch(from._internal_font_stretch());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_font_size = from._internal_font_size();
  uint32_t raw_font_size;
  memcpy(&raw_font_size, &tmp_font_size, sizeof(tmp_font_size));
  if (raw_font_size != 0) {
    _internal_set_font_size(from._internal_font_size());
  }
  if (from._internal_text_align() != 0) {
    _internal_set_text_align(from._internal_text_align());
  }
  if (from._internal_paragraph_align() != 0) {
    _internal_set_paragraph_align(from._internal_paragraph_align());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TextNode::CopyFrom(const TextNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uif.TextNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextNode::IsInitialized() const {
  return true;
}

void TextNode::InternalSwap(TextNode* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  edit_spans_.InternalSwap(&other->edit_spans_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &text_, lhs_arena,
      &other->text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &font_name_, lhs_arena,
      &other->font_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TextNode, paragraph_align_)
      + sizeof(TextNode::paragraph_align_)
      - PROTOBUF_FIELD_OFFSET(TextNode, bounds_)>(
          reinterpret_cast<char*>(&bounds_),
          reinterpret_cast<char*>(&other->bounds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TextNode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_uif_2eproto_getter, &descriptor_table_uif_2eproto_once,
      file_level_metadata_uif_2eproto[8]);
}

// ===================================================================

class PCBegin::_Internal {
 public:
  static const ::uif::Point& pt(const PCBegin* msg);
};

const ::uif::Point&
PCBegin::_Internal::pt(const PCBegin* msg) {
  return *msg->pt_;
}
PCBegin::PCBegin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:uif.PCBegin)
}
PCBegin::PCBegin(const PCBegin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pt()) {
    pt_ = new ::uif::Point(*from.pt_);
  } else {
    pt_ = nullptr;
  }
  kind_ = from.kind_;
  // @@protoc_insertion_point(copy_constructor:uif.PCBegin)
}

inline void PCBegin::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pt_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&pt_)) + sizeof(kind_));
}

PCBegin::~PCBegin() {
  // @@protoc_insertion_point(destructor:uif.PCBegin)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PCBegin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pt_;
}

void PCBegin::ArenaDtor(void* object) {
  PCBegin* _this = reinterpret_cast< PCBegin* >(object);
  (void)_this;
}
void PCBegin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PCBegin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PCBegin::Clear() {
// @@protoc_insertion_point(message_clear_start:uif.PCBegin)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && pt_ != nullptr) {
    delete pt_;
  }
  pt_ = nullptr;
  kind_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PCBegin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .uif.PCBeginKind kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_kind(static_cast<::uif::PCBeginKind>(val));
        } else
          goto handle_unusual;
        continue;
      // .uif.Point pt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pt(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PCBegin::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uif.PCBegin)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .uif.PCBeginKind kind = 1;
  if (this->_internal_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_kind(), target);
  }

  // .uif.Point pt = 2;
  if (this->_internal_has_pt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pt(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uif.PCBegin)
  return target;
}

size_t PCBegin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uif.PCBegin)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .uif.Point pt = 2;
  if (this->_internal_has_pt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pt_);
  }

  // .uif.PCBeginKind kind = 1;
  if (this->_internal_kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kind());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PCBegin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PCBegin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PCBegin::GetClassData() const { return &_class_data_; }

void PCBegin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PCBegin *>(to)->MergeFrom(
      static_cast<const PCBegin &>(from));
}


void PCBegin::MergeFrom(const PCBegin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uif.PCBegin)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pt()) {
    _internal_mutable_pt()->::uif::Point::MergeFrom(from._internal_pt());
  }
  if (from._internal_kind() != 0) {
    _internal_set_kind(from._internal_kind());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PCBegin::CopyFrom(const PCBegin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uif.PCBegin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PCBegin::IsInitialized() const {
  return true;
}

void PCBegin::InternalSwap(PCBegin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PCBegin, kind_)
      + sizeof(PCBegin::kind_)
      - PROTOBUF_FIELD_OFFSET(PCBegin, pt_)>(
          reinterpret_cast<char*>(&pt_),
          reinterpret_cast<char*>(&other->pt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PCBegin::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_uif_2eproto_getter, &descriptor_table_uif_2eproto_once,
      file_level_metadata_uif_2eproto[9]);
}

// ===================================================================

class PCEnd::_Internal {
 public:
};

PCEnd::PCEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:uif.PCEnd)
}
PCEnd::PCEnd(const PCEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  kind_ = from.kind_;
  // @@protoc_insertion_point(copy_constructor:uif.PCEnd)
}

inline void PCEnd::SharedCtor() {
kind_ = 0;
}

PCEnd::~PCEnd() {
  // @@protoc_insertion_point(destructor:uif.PCEnd)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PCEnd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PCEnd::ArenaDtor(void* object) {
  PCEnd* _this = reinterpret_cast< PCEnd* >(object);
  (void)_this;
}
void PCEnd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PCEnd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PCEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:uif.PCEnd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kind_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PCEnd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .uif.PCEndKind kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_kind(static_cast<::uif::PCEndKind>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PCEnd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uif.PCEnd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .uif.PCEndKind kind = 1;
  if (this->_internal_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_kind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uif.PCEnd)
  return target;
}

size_t PCEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uif.PCEnd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .uif.PCEndKind kind = 1;
  if (this->_internal_kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kind());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PCEnd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PCEnd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PCEnd::GetClassData() const { return &_class_data_; }

void PCEnd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PCEnd *>(to)->MergeFrom(
      static_cast<const PCEnd &>(from));
}


void PCEnd::MergeFrom(const PCEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uif.PCEnd)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_kind() != 0) {
    _internal_set_kind(from._internal_kind());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PCEnd::CopyFrom(const PCEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uif.PCEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PCEnd::IsInitialized() const {
  return true;
}

void PCEnd::InternalSwap(PCEnd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(kind_, other->kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PCEnd::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_uif_2eproto_getter, &descriptor_table_uif_2eproto_once,
      file_level_metadata_uif_2eproto[10]);
}

// ===================================================================

class PCLineTo::_Internal {
 public:
  static const ::uif::Point& pt(const PCLineTo* msg);
};

const ::uif::Point&
PCLineTo::_Internal::pt(const PCLineTo* msg) {
  return *msg->pt_;
}
PCLineTo::PCLineTo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:uif.PCLineTo)
}
PCLineTo::PCLineTo(const PCLineTo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pt()) {
    pt_ = new ::uif::Point(*from.pt_);
  } else {
    pt_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:uif.PCLineTo)
}

inline void PCLineTo::SharedCtor() {
pt_ = nullptr;
}

PCLineTo::~PCLineTo() {
  // @@protoc_insertion_point(destructor:uif.PCLineTo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PCLineTo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pt_;
}

void PCLineTo::ArenaDtor(void* object) {
  PCLineTo* _this = reinterpret_cast< PCLineTo* >(object);
  (void)_this;
}
void PCLineTo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PCLineTo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PCLineTo::Clear() {
// @@protoc_insertion_point(message_clear_start:uif.PCLineTo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && pt_ != nullptr) {
    delete pt_;
  }
  pt_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PCLineTo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .uif.Point pt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pt(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PCLineTo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uif.PCLineTo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .uif.Point pt = 1;
  if (this->_internal_has_pt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pt(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uif.PCLineTo)
  return target;
}

size_t PCLineTo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uif.PCLineTo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .uif.Point pt = 1;
  if (this->_internal_has_pt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pt_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PCLineTo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PCLineTo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PCLineTo::GetClassData() const { return &_class_data_; }

void PCLineTo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PCLineTo *>(to)->MergeFrom(
      static_cast<const PCLineTo &>(from));
}


void PCLineTo::MergeFrom(const PCLineTo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uif.PCLineTo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pt()) {
    _internal_mutable_pt()->::uif::Point::MergeFrom(from._internal_pt());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PCLineTo::CopyFrom(const PCLineTo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uif.PCLineTo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PCLineTo::IsInitialized() const {
  return true;
}

void PCLineTo::InternalSwap(PCLineTo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(pt_, other->pt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PCLineTo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_uif_2eproto_getter, &descriptor_table_uif_2eproto_once,
      file_level_metadata_uif_2eproto[11]);
}

// ===================================================================

class PCCubicCurve::_Internal {
 public:
  static const ::uif::Point& control1(const PCCubicCurve* msg);
  static const ::uif::Point& control2(const PCCubicCurve* msg);
  static const ::uif::Point& end(const PCCubicCurve* msg);
};

const ::uif::Point&
PCCubicCurve::_Internal::control1(const PCCubicCurve* msg) {
  return *msg->control1_;
}
const ::uif::Point&
PCCubicCurve::_Internal::control2(const PCCubicCurve* msg) {
  return *msg->control2_;
}
const ::uif::Point&
PCCubicCurve::_Internal::end(const PCCubicCurve* msg) {
  return *msg->end_;
}
PCCubicCurve::PCCubicCurve(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:uif.PCCubicCurve)
}
PCCubicCurve::PCCubicCurve(const PCCubicCurve& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_control1()) {
    control1_ = new ::uif::Point(*from.control1_);
  } else {
    control1_ = nullptr;
  }
  if (from._internal_has_control2()) {
    control2_ = new ::uif::Point(*from.control2_);
  } else {
    control2_ = nullptr;
  }
  if (from._internal_has_end()) {
    end_ = new ::uif::Point(*from.end_);
  } else {
    end_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:uif.PCCubicCurve)
}

inline void PCCubicCurve::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&control1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&control1_)) + sizeof(end_));
}

PCCubicCurve::~PCCubicCurve() {
  // @@protoc_insertion_point(destructor:uif.PCCubicCurve)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PCCubicCurve::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete control1_;
  if (this != internal_default_instance()) delete control2_;
  if (this != internal_default_instance()) delete end_;
}

void PCCubicCurve::ArenaDtor(void* object) {
  PCCubicCurve* _this = reinterpret_cast< PCCubicCurve* >(object);
  (void)_this;
}
void PCCubicCurve::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PCCubicCurve::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PCCubicCurve::Clear() {
// @@protoc_insertion_point(message_clear_start:uif.PCCubicCurve)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && control1_ != nullptr) {
    delete control1_;
  }
  control1_ = nullptr;
  if (GetArenaForAllocation() == nullptr && control2_ != nullptr) {
    delete control2_;
  }
  control2_ = nullptr;
  if (GetArenaForAllocation() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PCCubicCurve::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .uif.Point control1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_control1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uif.Point control2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_control2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uif.Point end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PCCubicCurve::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uif.PCCubicCurve)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .uif.Point control1 = 1;
  if (this->_internal_has_control1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::control1(this), target, stream);
  }

  // .uif.Point control2 = 2;
  if (this->_internal_has_control2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::control2(this), target, stream);
  }

  // .uif.Point end = 3;
  if (this->_internal_has_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::end(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uif.PCCubicCurve)
  return target;
}

size_t PCCubicCurve::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uif.PCCubicCurve)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .uif.Point control1 = 1;
  if (this->_internal_has_control1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *control1_);
  }

  // .uif.Point control2 = 2;
  if (this->_internal_has_control2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *control2_);
  }

  // .uif.Point end = 3;
  if (this->_internal_has_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PCCubicCurve::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PCCubicCurve::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PCCubicCurve::GetClassData() const { return &_class_data_; }

void PCCubicCurve::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PCCubicCurve *>(to)->MergeFrom(
      static_cast<const PCCubicCurve &>(from));
}


void PCCubicCurve::MergeFrom(const PCCubicCurve& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uif.PCCubicCurve)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_control1()) {
    _internal_mutable_control1()->::uif::Point::MergeFrom(from._internal_control1());
  }
  if (from._internal_has_control2()) {
    _internal_mutable_control2()->::uif::Point::MergeFrom(from._internal_control2());
  }
  if (from._internal_has_end()) {
    _internal_mutable_end()->::uif::Point::MergeFrom(from._internal_end());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PCCubicCurve::CopyFrom(const PCCubicCurve& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uif.PCCubicCurve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PCCubicCurve::IsInitialized() const {
  return true;
}

void PCCubicCurve::InternalSwap(PCCubicCurve* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PCCubicCurve, end_)
      + sizeof(PCCubicCurve::end_)
      - PROTOBUF_FIELD_OFFSET(PCCubicCurve, control1_)>(
          reinterpret_cast<char*>(&control1_),
          reinterpret_cast<char*>(&other->control1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PCCubicCurve::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_uif_2eproto_getter, &descriptor_table_uif_2eproto_once,
      file_level_metadata_uif_2eproto[12]);
}

// ===================================================================

class PCQuadraticCurve::_Internal {
 public:
  static const ::uif::Point& control1(const PCQuadraticCurve* msg);
  static const ::uif::Point& end(const PCQuadraticCurve* msg);
};

const ::uif::Point&
PCQuadraticCurve::_Internal::control1(const PCQuadraticCurve* msg) {
  return *msg->control1_;
}
const ::uif::Point&
PCQuadraticCurve::_Internal::end(const PCQuadraticCurve* msg) {
  return *msg->end_;
}
PCQuadraticCurve::PCQuadraticCurve(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:uif.PCQuadraticCurve)
}
PCQuadraticCurve::PCQuadraticCurve(const PCQuadraticCurve& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_control1()) {
    control1_ = new ::uif::Point(*from.control1_);
  } else {
    control1_ = nullptr;
  }
  if (from._internal_has_end()) {
    end_ = new ::uif::Point(*from.end_);
  } else {
    end_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:uif.PCQuadraticCurve)
}

inline void PCQuadraticCurve::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&control1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&control1_)) + sizeof(end_));
}

PCQuadraticCurve::~PCQuadraticCurve() {
  // @@protoc_insertion_point(destructor:uif.PCQuadraticCurve)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PCQuadraticCurve::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete control1_;
  if (this != internal_default_instance()) delete end_;
}

void PCQuadraticCurve::ArenaDtor(void* object) {
  PCQuadraticCurve* _this = reinterpret_cast< PCQuadraticCurve* >(object);
  (void)_this;
}
void PCQuadraticCurve::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PCQuadraticCurve::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PCQuadraticCurve::Clear() {
// @@protoc_insertion_point(message_clear_start:uif.PCQuadraticCurve)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && control1_ != nullptr) {
    delete control1_;
  }
  control1_ = nullptr;
  if (GetArenaForAllocation() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PCQuadraticCurve::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .uif.Point control1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_control1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uif.Point end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PCQuadraticCurve::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uif.PCQuadraticCurve)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .uif.Point control1 = 1;
  if (this->_internal_has_control1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::control1(this), target, stream);
  }

  // .uif.Point end = 2;
  if (this->_internal_has_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::end(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uif.PCQuadraticCurve)
  return target;
}

size_t PCQuadraticCurve::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uif.PCQuadraticCurve)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .uif.Point control1 = 1;
  if (this->_internal_has_control1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *control1_);
  }

  // .uif.Point end = 2;
  if (this->_internal_has_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PCQuadraticCurve::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PCQuadraticCurve::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PCQuadraticCurve::GetClassData() const { return &_class_data_; }

void PCQuadraticCurve::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PCQuadraticCurve *>(to)->MergeFrom(
      static_cast<const PCQuadraticCurve &>(from));
}


void PCQuadraticCurve::MergeFrom(const PCQuadraticCurve& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uif.PCQuadraticCurve)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_control1()) {
    _internal_mutable_control1()->::uif::Point::MergeFrom(from._internal_control1());
  }
  if (from._internal_has_end()) {
    _internal_mutable_end()->::uif::Point::MergeFrom(from._internal_end());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PCQuadraticCurve::CopyFrom(const PCQuadraticCurve& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uif.PCQuadraticCurve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PCQuadraticCurve::IsInitialized() const {
  return true;
}

void PCQuadraticCurve::InternalSwap(PCQuadraticCurve* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PCQuadraticCurve, end_)
      + sizeof(PCQuadraticCurve::end_)
      - PROTOBUF_FIELD_OFFSET(PCQuadraticCurve, control1_)>(
          reinterpret_cast<char*>(&control1_),
          reinterpret_cast<char*>(&other->control1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PCQuadraticCurve::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_uif_2eproto_getter, &descriptor_table_uif_2eproto_once,
      file_level_metadata_uif_2eproto[13]);
}

// ===================================================================

class PCArc::_Internal {
 public:
  static const ::uif::Point& end(const PCArc* msg);
};

const ::uif::Point&
PCArc::_Internal::end(const PCArc* msg) {
  return *msg->end_;
}
PCArc::PCArc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:uif.PCArc)
}
PCArc::PCArc(const PCArc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_end()) {
    end_ = new ::uif::Point(*from.end_);
  } else {
    end_ = nullptr;
  }
  ::memcpy(&x_radius_, &from.x_radius_,
    static_cast<size_t>(reinterpret_cast<char*>(&sweep_flag_) -
    reinterpret_cast<char*>(&x_radius_)) + sizeof(sweep_flag_));
  // @@protoc_insertion_point(copy_constructor:uif.PCArc)
}

inline void PCArc::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&end_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sweep_flag_) -
    reinterpret_cast<char*>(&end_)) + sizeof(sweep_flag_));
}

PCArc::~PCArc() {
  // @@protoc_insertion_point(destructor:uif.PCArc)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PCArc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete end_;
}

void PCArc::ArenaDtor(void* object) {
  PCArc* _this = reinterpret_cast< PCArc* >(object);
  (void)_this;
}
void PCArc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PCArc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PCArc::Clear() {
// @@protoc_insertion_point(message_clear_start:uif.PCArc)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
  ::memset(&x_radius_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sweep_flag_) -
      reinterpret_cast<char*>(&x_radius_)) + sizeof(sweep_flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PCArc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x_radius = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          x_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y_radius = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          y_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float x_axis_rotation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          x_axis_rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool large_arc_flag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          large_arc_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool sweep_flag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          sweep_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uif.Point end = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PCArc::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uif.PCArc)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x_radius = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x_radius = this->_internal_x_radius();
  uint32_t raw_x_radius;
  memcpy(&raw_x_radius, &tmp_x_radius, sizeof(tmp_x_radius));
  if (raw_x_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x_radius(), target);
  }

  // float y_radius = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y_radius = this->_internal_y_radius();
  uint32_t raw_y_radius;
  memcpy(&raw_y_radius, &tmp_y_radius, sizeof(tmp_y_radius));
  if (raw_y_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y_radius(), target);
  }

  // float x_axis_rotation = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x_axis_rotation = this->_internal_x_axis_rotation();
  uint32_t raw_x_axis_rotation;
  memcpy(&raw_x_axis_rotation, &tmp_x_axis_rotation, sizeof(tmp_x_axis_rotation));
  if (raw_x_axis_rotation != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_x_axis_rotation(), target);
  }

  // bool large_arc_flag = 4;
  if (this->_internal_large_arc_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_large_arc_flag(), target);
  }

  // bool sweep_flag = 5;
  if (this->_internal_sweep_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_sweep_flag(), target);
  }

  // .uif.Point end = 6;
  if (this->_internal_has_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::end(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uif.PCArc)
  return target;
}

size_t PCArc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uif.PCArc)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .uif.Point end = 6;
  if (this->_internal_has_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_);
  }

  // float x_radius = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x_radius = this->_internal_x_radius();
  uint32_t raw_x_radius;
  memcpy(&raw_x_radius, &tmp_x_radius, sizeof(tmp_x_radius));
  if (raw_x_radius != 0) {
    total_size += 1 + 4;
  }

  // float y_radius = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y_radius = this->_internal_y_radius();
  uint32_t raw_y_radius;
  memcpy(&raw_y_radius, &tmp_y_radius, sizeof(tmp_y_radius));
  if (raw_y_radius != 0) {
    total_size += 1 + 4;
  }

  // float x_axis_rotation = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x_axis_rotation = this->_internal_x_axis_rotation();
  uint32_t raw_x_axis_rotation;
  memcpy(&raw_x_axis_rotation, &tmp_x_axis_rotation, sizeof(tmp_x_axis_rotation));
  if (raw_x_axis_rotation != 0) {
    total_size += 1 + 4;
  }

  // bool large_arc_flag = 4;
  if (this->_internal_large_arc_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool sweep_flag = 5;
  if (this->_internal_sweep_flag() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PCArc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PCArc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PCArc::GetClassData() const { return &_class_data_; }

void PCArc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PCArc *>(to)->MergeFrom(
      static_cast<const PCArc &>(from));
}


void PCArc::MergeFrom(const PCArc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uif.PCArc)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_end()) {
    _internal_mutable_end()->::uif::Point::MergeFrom(from._internal_end());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x_radius = from._internal_x_radius();
  uint32_t raw_x_radius;
  memcpy(&raw_x_radius, &tmp_x_radius, sizeof(tmp_x_radius));
  if (raw_x_radius != 0) {
    _internal_set_x_radius(from._internal_x_radius());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y_radius = from._internal_y_radius();
  uint32_t raw_y_radius;
  memcpy(&raw_y_radius, &tmp_y_radius, sizeof(tmp_y_radius));
  if (raw_y_radius != 0) {
    _internal_set_y_radius(from._internal_y_radius());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x_axis_rotation = from._internal_x_axis_rotation();
  uint32_t raw_x_axis_rotation;
  memcpy(&raw_x_axis_rotation, &tmp_x_axis_rotation, sizeof(tmp_x_axis_rotation));
  if (raw_x_axis_rotation != 0) {
    _internal_set_x_axis_rotation(from._internal_x_axis_rotation());
  }
  if (from._internal_large_arc_flag() != 0) {
    _internal_set_large_arc_flag(from._internal_large_arc_flag());
  }
  if (from._internal_sweep_flag() != 0) {
    _internal_set_sweep_flag(from._internal_sweep_flag());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PCArc::CopyFrom(const PCArc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uif.PCArc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PCArc::IsInitialized() const {
  return true;
}

void PCArc::InternalSwap(PCArc* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PCArc, sweep_flag_)
      + sizeof(PCArc::sweep_flag_)
      - PROTOBUF_FIELD_OFFSET(PCArc, end_)>(
          reinterpret_cast<char*>(&end_),
          reinterpret_cast<char*>(&other->end_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PCArc::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_uif_2eproto_getter, &descriptor_table_uif_2eproto_once,
      file_level_metadata_uif_2eproto[14]);
}

// ===================================================================

class PathCommand::_Internal {
 public:
  static const ::uif::PCBegin& begin(const PathCommand* msg);
  static const ::uif::PCEnd& end(const PathCommand* msg);
  static const ::uif::PCLineTo& line_to(const PathCommand* msg);
  static const ::uif::PCCubicCurve& cubic_to(const PathCommand* msg);
  static const ::uif::PCQuadraticCurve& quad_to(const PathCommand* msg);
  static const ::uif::PCArc& arc_to(const PathCommand* msg);
};

const ::uif::PCBegin&
PathCommand::_Internal::begin(const PathCommand* msg) {
  return *msg->cmd_.begin_;
}
const ::uif::PCEnd&
PathCommand::_Internal::end(const PathCommand* msg) {
  return *msg->cmd_.end_;
}
const ::uif::PCLineTo&
PathCommand::_Internal::line_to(const PathCommand* msg) {
  return *msg->cmd_.line_to_;
}
const ::uif::PCCubicCurve&
PathCommand::_Internal::cubic_to(const PathCommand* msg) {
  return *msg->cmd_.cubic_to_;
}
const ::uif::PCQuadraticCurve&
PathCommand::_Internal::quad_to(const PathCommand* msg) {
  return *msg->cmd_.quad_to_;
}
const ::uif::PCArc&
PathCommand::_Internal::arc_to(const PathCommand* msg) {
  return *msg->cmd_.arc_to_;
}
void PathCommand::set_allocated_begin(::uif::PCBegin* begin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (begin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::uif::PCBegin>::GetOwningArena(begin);
    if (message_arena != submessage_arena) {
      begin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, begin, submessage_arena);
    }
    set_has_begin();
    cmd_.begin_ = begin;
  }
  // @@protoc_insertion_point(field_set_allocated:uif.PathCommand.begin)
}
void PathCommand::set_allocated_end(::uif::PCEnd* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::uif::PCEnd>::GetOwningArena(end);
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    set_has_end();
    cmd_.end_ = end;
  }
  // @@protoc_insertion_point(field_set_allocated:uif.PathCommand.end)
}
void PathCommand::set_allocated_line_to(::uif::PCLineTo* line_to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (line_to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::uif::PCLineTo>::GetOwningArena(line_to);
    if (message_arena != submessage_arena) {
      line_to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, line_to, submessage_arena);
    }
    set_has_line_to();
    cmd_.line_to_ = line_to;
  }
  // @@protoc_insertion_point(field_set_allocated:uif.PathCommand.line_to)
}
void PathCommand::set_allocated_cubic_to(::uif::PCCubicCurve* cubic_to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (cubic_to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::uif::PCCubicCurve>::GetOwningArena(cubic_to);
    if (message_arena != submessage_arena) {
      cubic_to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cubic_to, submessage_arena);
    }
    set_has_cubic_to();
    cmd_.cubic_to_ = cubic_to;
  }
  // @@protoc_insertion_point(field_set_allocated:uif.PathCommand.cubic_to)
}
void PathCommand::set_allocated_quad_to(::uif::PCQuadraticCurve* quad_to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (quad_to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::uif::PCQuadraticCurve>::GetOwningArena(quad_to);
    if (message_arena != submessage_arena) {
      quad_to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quad_to, submessage_arena);
    }
    set_has_quad_to();
    cmd_.quad_to_ = quad_to;
  }
  // @@protoc_insertion_point(field_set_allocated:uif.PathCommand.quad_to)
}
void PathCommand::set_allocated_arc_to(::uif::PCArc* arc_to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (arc_to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::uif::PCArc>::GetOwningArena(arc_to);
    if (message_arena != submessage_arena) {
      arc_to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arc_to, submessage_arena);
    }
    set_has_arc_to();
    cmd_.arc_to_ = arc_to;
  }
  // @@protoc_insertion_point(field_set_allocated:uif.PathCommand.arc_to)
}
PathCommand::PathCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:uif.PathCommand)
}
PathCommand::PathCommand(const PathCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_cmd();
  switch (from.cmd_case()) {
    case kBegin: {
      _internal_mutable_begin()->::uif::PCBegin::MergeFrom(from._internal_begin());
      break;
    }
    case kEnd: {
      _internal_mutable_end()->::uif::PCEnd::MergeFrom(from._internal_end());
      break;
    }
    case kLineTo: {
      _internal_mutable_line_to()->::uif::PCLineTo::MergeFrom(from._internal_line_to());
      break;
    }
    case kCubicTo: {
      _internal_mutable_cubic_to()->::uif::PCCubicCurve::MergeFrom(from._internal_cubic_to());
      break;
    }
    case kQuadTo: {
      _internal_mutable_quad_to()->::uif::PCQuadraticCurve::MergeFrom(from._internal_quad_to());
      break;
    }
    case kArcTo: {
      _internal_mutable_arc_to()->::uif::PCArc::MergeFrom(from._internal_arc_to());
      break;
    }
    case CMD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:uif.PathCommand)
}

inline void PathCommand::SharedCtor() {
clear_has_cmd();
}

PathCommand::~PathCommand() {
  // @@protoc_insertion_point(destructor:uif.PathCommand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PathCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_cmd()) {
    clear_cmd();
  }
}

void PathCommand::ArenaDtor(void* object) {
  PathCommand* _this = reinterpret_cast< PathCommand* >(object);
  (void)_this;
}
void PathCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PathCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PathCommand::clear_cmd() {
// @@protoc_insertion_point(one_of_clear_start:uif.PathCommand)
  switch (cmd_case()) {
    case kBegin: {
      if (GetArenaForAllocation() == nullptr) {
        delete cmd_.begin_;
      }
      break;
    }
    case kEnd: {
      if (GetArenaForAllocation() == nullptr) {
        delete cmd_.end_;
      }
      break;
    }
    case kLineTo: {
      if (GetArenaForAllocation() == nullptr) {
        delete cmd_.line_to_;
      }
      break;
    }
    case kCubicTo: {
      if (GetArenaForAllocation() == nullptr) {
        delete cmd_.cubic_to_;
      }
      break;
    }
    case kQuadTo: {
      if (GetArenaForAllocation() == nullptr) {
        delete cmd_.quad_to_;
      }
      break;
    }
    case kArcTo: {
      if (GetArenaForAllocation() == nullptr) {
        delete cmd_.arc_to_;
      }
      break;
    }
    case CMD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CMD_NOT_SET;
}


void PathCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:uif.PathCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_cmd();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PathCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .uif.PCBegin begin = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_begin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uif.PCLineTo line_to = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_line_to(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uif.PCCubicCurve cubic_to = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_cubic_to(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uif.PCQuadraticCurve quad_to = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_quad_to(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uif.PCArc arc_to = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_arc_to(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uif.PCEnd end = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PathCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uif.PathCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .uif.PCBegin begin = 10;
  if (_internal_has_begin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::begin(this), target, stream);
  }

  // .uif.PCLineTo line_to = 11;
  if (_internal_has_line_to()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::line_to(this), target, stream);
  }

  // .uif.PCCubicCurve cubic_to = 12;
  if (_internal_has_cubic_to()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::cubic_to(this), target, stream);
  }

  // .uif.PCQuadraticCurve quad_to = 13;
  if (_internal_has_quad_to()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::quad_to(this), target, stream);
  }

  // .uif.PCArc arc_to = 14;
  if (_internal_has_arc_to()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::arc_to(this), target, stream);
  }

  // .uif.PCEnd end = 20;
  if (_internal_has_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::end(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uif.PathCommand)
  return target;
}

size_t PathCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uif.PathCommand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (cmd_case()) {
    // .uif.PCBegin begin = 10;
    case kBegin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cmd_.begin_);
      break;
    }
    // .uif.PCEnd end = 20;
    case kEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cmd_.end_);
      break;
    }
    // .uif.PCLineTo line_to = 11;
    case kLineTo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cmd_.line_to_);
      break;
    }
    // .uif.PCCubicCurve cubic_to = 12;
    case kCubicTo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cmd_.cubic_to_);
      break;
    }
    // .uif.PCQuadraticCurve quad_to = 13;
    case kQuadTo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cmd_.quad_to_);
      break;
    }
    // .uif.PCArc arc_to = 14;
    case kArcTo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cmd_.arc_to_);
      break;
    }
    case CMD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PathCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PathCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PathCommand::GetClassData() const { return &_class_data_; }

void PathCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PathCommand *>(to)->MergeFrom(
      static_cast<const PathCommand &>(from));
}


void PathCommand::MergeFrom(const PathCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uif.PathCommand)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.cmd_case()) {
    case kBegin: {
      _internal_mutable_begin()->::uif::PCBegin::MergeFrom(from._internal_begin());
      break;
    }
    case kEnd: {
      _internal_mutable_end()->::uif::PCEnd::MergeFrom(from._internal_end());
      break;
    }
    case kLineTo: {
      _internal_mutable_line_to()->::uif::PCLineTo::MergeFrom(from._internal_line_to());
      break;
    }
    case kCubicTo: {
      _internal_mutable_cubic_to()->::uif::PCCubicCurve::MergeFrom(from._internal_cubic_to());
      break;
    }
    case kQuadTo: {
      _internal_mutable_quad_to()->::uif::PCQuadraticCurve::MergeFrom(from._internal_quad_to());
      break;
    }
    case kArcTo: {
      _internal_mutable_arc_to()->::uif::PCArc::MergeFrom(from._internal_arc_to());
      break;
    }
    case CMD_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PathCommand::CopyFrom(const PathCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uif.PathCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathCommand::IsInitialized() const {
  return true;
}

void PathCommand::InternalSwap(PathCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(cmd_, other->cmd_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PathCommand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_uif_2eproto_getter, &descriptor_table_uif_2eproto_once,
      file_level_metadata_uif_2eproto[15]);
}

// ===================================================================

class PathNode::_Internal {
 public:
  static const ::uif::Brush& stroke(const PathNode* msg);
};

const ::uif::Brush&
PathNode::_Internal::stroke(const PathNode* msg) {
  return *msg->stroke_;
}
PathNode::PathNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  commands_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:uif.PathNode)
}
PathNode::PathNode(const PathNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      commands_(from.commands_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stroke()) {
    stroke_ = new ::uif::Brush(*from.stroke_);
  } else {
    stroke_ = nullptr;
  }
  is_filled_ = from.is_filled_;
  // @@protoc_insertion_point(copy_constructor:uif.PathNode)
}

inline void PathNode::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stroke_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_filled_) -
    reinterpret_cast<char*>(&stroke_)) + sizeof(is_filled_));
}

PathNode::~PathNode() {
  // @@protoc_insertion_point(destructor:uif.PathNode)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PathNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete stroke_;
}

void PathNode::ArenaDtor(void* object) {
  PathNode* _this = reinterpret_cast< PathNode* >(object);
  (void)_this;
}
void PathNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PathNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PathNode::Clear() {
// @@protoc_insertion_point(message_clear_start:uif.PathNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  commands_.Clear();
  if (GetArenaForAllocation() == nullptr && stroke_ != nullptr) {
    delete stroke_;
  }
  stroke_ = nullptr;
  is_filled_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PathNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .uif.PathCommand commands = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_commands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool is_filled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          is_filled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uif.Brush stroke = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PathNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uif.PathNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .uif.PathCommand commands = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_commands_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_commands(i), target, stream);
  }

  // bool is_filled = 2;
  if (this->_internal_is_filled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_filled(), target);
  }

  // .uif.Brush stroke = 3;
  if (this->_internal_has_stroke()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::stroke(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uif.PathNode)
  return target;
}

size_t PathNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uif.PathNode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .uif.PathCommand commands = 1;
  total_size += 1UL * this->_internal_commands_size();
  for (const auto& msg : this->commands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .uif.Brush stroke = 3;
  if (this->_internal_has_stroke()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stroke_);
  }

  // bool is_filled = 2;
  if (this->_internal_is_filled() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PathNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PathNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PathNode::GetClassData() const { return &_class_data_; }

void PathNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PathNode *>(to)->MergeFrom(
      static_cast<const PathNode &>(from));
}


void PathNode::MergeFrom(const PathNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uif.PathNode)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  commands_.MergeFrom(from.commands_);
  if (from._internal_has_stroke()) {
    _internal_mutable_stroke()->::uif::Brush::MergeFrom(from._internal_stroke());
  }
  if (from._internal_is_filled() != 0) {
    _internal_set_is_filled(from._internal_is_filled());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PathNode::CopyFrom(const PathNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uif.PathNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathNode::IsInitialized() const {
  return true;
}

void PathNode::InternalSwap(PathNode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  commands_.InternalSwap(&other->commands_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PathNode, is_filled_)
      + sizeof(PathNode::is_filled_)
      - PROTOBUF_FIELD_OFFSET(PathNode, stroke_)>(
          reinterpret_cast<char*>(&stroke_),
          reinterpret_cast<char*>(&other->stroke_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PathNode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_uif_2eproto_getter, &descriptor_table_uif_2eproto_once,
      file_level_metadata_uif_2eproto[16]);
}

// ===================================================================

class EmptyNode::_Internal {
 public:
};

EmptyNode::EmptyNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:uif.EmptyNode)
}
EmptyNode::EmptyNode(const EmptyNode& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:uif.EmptyNode)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmptyNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmptyNode::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata EmptyNode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_uif_2eproto_getter, &descriptor_table_uif_2eproto_once,
      file_level_metadata_uif_2eproto[17]);
}

// ===================================================================

class ClipRectNode::_Internal {
 public:
  static const ::uif::Rectangle& rect(const ClipRectNode* msg);
};

const ::uif::Rectangle&
ClipRectNode::_Internal::rect(const ClipRectNode* msg) {
  return *msg->rect_;
}
ClipRectNode::ClipRectNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:uif.ClipRectNode)
}
ClipRectNode::ClipRectNode(const ClipRectNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rect()) {
    rect_ = new ::uif::Rectangle(*from.rect_);
  } else {
    rect_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:uif.ClipRectNode)
}

inline void ClipRectNode::SharedCtor() {
rect_ = nullptr;
}

ClipRectNode::~ClipRectNode() {
  // @@protoc_insertion_point(destructor:uif.ClipRectNode)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ClipRectNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete rect_;
}

void ClipRectNode::ArenaDtor(void* object) {
  ClipRectNode* _this = reinterpret_cast< ClipRectNode* >(object);
  (void)_this;
}
void ClipRectNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClipRectNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClipRectNode::Clear() {
// @@protoc_insertion_point(message_clear_start:uif.ClipRectNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && rect_ != nullptr) {
    delete rect_;
  }
  rect_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClipRectNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .uif.Rectangle rect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rect(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClipRectNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uif.ClipRectNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .uif.Rectangle rect = 1;
  if (this->_internal_has_rect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rect(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uif.ClipRectNode)
  return target;
}

size_t ClipRectNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uif.ClipRectNode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .uif.Rectangle rect = 1;
  if (this->_internal_has_rect()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rect_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClipRectNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClipRectNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClipRectNode::GetClassData() const { return &_class_data_; }

void ClipRectNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClipRectNode *>(to)->MergeFrom(
      static_cast<const ClipRectNode &>(from));
}


void ClipRectNode::MergeFrom(const ClipRectNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uif.ClipRectNode)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_rect()) {
    _internal_mutable_rect()->::uif::Rectangle::MergeFrom(from._internal_rect());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClipRectNode::CopyFrom(const ClipRectNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uif.ClipRectNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClipRectNode::IsInitialized() const {
  return true;
}

void ClipRectNode::InternalSwap(ClipRectNode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(rect_, other->rect_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClipRectNode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_uif_2eproto_getter, &descriptor_table_uif_2eproto_once,
      file_level_metadata_uif_2eproto[18]);
}

// ===================================================================

class EditCommand::_Internal {
 public:
  static const ::uif::RectangleNode& rect(const EditCommand* msg);
  static const ::uif::TextNode& text(const EditCommand* msg);
  static const ::uif::PathNode& path(const EditCommand* msg);
  static const ::uif::EmptyNode& empty(const EditCommand* msg);
  static const ::uif::ClipRectNode& clip(const EditCommand* msg);
};

const ::uif::RectangleNode&
EditCommand::_Internal::rect(const EditCommand* msg) {
  return *msg->node_.rect_;
}
const ::uif::TextNode&
EditCommand::_Internal::text(const EditCommand* msg) {
  return *msg->node_.text_;
}
const ::uif::PathNode&
EditCommand::_Internal::path(const EditCommand* msg) {
  return *msg->node_.path_;
}
const ::uif::EmptyNode&
EditCommand::_Internal::empty(const EditCommand* msg) {
  return *msg->node_.empty_;
}
const ::uif::ClipRectNode&
EditCommand::_Internal::clip(const EditCommand* msg) {
  return *msg->node_.clip_;
}
void EditCommand::set_allocated_rect(::uif::RectangleNode* rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::uif::RectangleNode>::GetOwningArena(rect);
    if (message_arena != submessage_arena) {
      rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rect, submessage_arena);
    }
    set_has_rect();
    node_.rect_ = rect;
  }
  // @@protoc_insertion_point(field_set_allocated:uif.EditCommand.rect)
}
void EditCommand::set_allocated_text(::uif::TextNode* text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::uif::TextNode>::GetOwningArena(text);
    if (message_arena != submessage_arena) {
      text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    set_has_text();
    node_.text_ = text;
  }
  // @@protoc_insertion_point(field_set_allocated:uif.EditCommand.text)
}
void EditCommand::set_allocated_path(::uif::PathNode* path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::uif::PathNode>::GetOwningArena(path);
    if (message_arena != submessage_arena) {
      path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path, submessage_arena);
    }
    set_has_path();
    node_.path_ = path;
  }
  // @@protoc_insertion_point(field_set_allocated:uif.EditCommand.path)
}
void EditCommand::set_allocated_empty(::uif::EmptyNode* empty) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (empty) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::uif::EmptyNode>::GetOwningArena(empty);
    if (message_arena != submessage_arena) {
      empty = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, empty, submessage_arena);
    }
    set_has_empty();
    node_.empty_ = empty;
  }
  // @@protoc_insertion_point(field_set_allocated:uif.EditCommand.empty)
}
void EditCommand::set_allocated_clip(::uif::ClipRectNode* clip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (clip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::uif::ClipRectNode>::GetOwningArena(clip);
    if (message_arena != submessage_arena) {
      clip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clip, submessage_arena);
    }
    set_has_clip();
    node_.clip_ = clip;
  }
  // @@protoc_insertion_point(field_set_allocated:uif.EditCommand.clip)
}
EditCommand::EditCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:uif.EditCommand)
}
EditCommand::EditCommand(const EditCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_id().empty()) {
    client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_client_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&parent_id_, &from.parent_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&parent_id_)) + sizeof(kind_));
  clear_has_node();
  switch (from.node_case()) {
    case kRect: {
      _internal_mutable_rect()->::uif::RectangleNode::MergeFrom(from._internal_rect());
      break;
    }
    case kText: {
      _internal_mutable_text()->::uif::TextNode::MergeFrom(from._internal_text());
      break;
    }
    case kPath: {
      _internal_mutable_path()->::uif::PathNode::MergeFrom(from._internal_path());
      break;
    }
    case kEmpty: {
      _internal_mutable_empty()->::uif::EmptyNode::MergeFrom(from._internal_empty());
      break;
    }
    case kClip: {
      _internal_mutable_clip()->::uif::ClipRectNode::MergeFrom(from._internal_clip());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:uif.EditCommand)
}

inline void EditCommand::SharedCtor() {
client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&parent_id_)) + sizeof(kind_));
clear_has_node();
}

EditCommand::~EditCommand() {
  // @@protoc_insertion_point(destructor:uif.EditCommand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EditCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_node()) {
    clear_node();
  }
}

void EditCommand::ArenaDtor(void* object) {
  EditCommand* _this = reinterpret_cast< EditCommand* >(object);
  (void)_this;
}
void EditCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EditCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EditCommand::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:uif.EditCommand)
  switch (node_case()) {
    case kRect: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.rect_;
      }
      break;
    }
    case kText: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.text_;
      }
      break;
    }
    case kPath: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.path_;
      }
      break;
    }
    case kEmpty: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.empty_;
      }
      break;
    }
    case kClip: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.clip_;
      }
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NODE_NOT_SET;
}


void EditCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:uif.EditCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmpty();
  ::memset(&parent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kind_) -
      reinterpret_cast<char*>(&parent_id_)) + sizeof(kind_));
  clear_node();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EditCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .uif.EditCommand.EditKind kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_kind(static_cast<::uif::EditCommand_EditKind>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 parent_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          parent_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 object_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string client_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "uif.EditCommand.client_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uif.RectangleNode rect = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_rect(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uif.TextNode text = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_text(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uif.PathNode path = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uif.EmptyNode empty = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_empty(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uif.ClipRectNode clip = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_clip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EditCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uif.EditCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .uif.EditCommand.EditKind kind = 1;
  if (this->_internal_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_kind(), target);
  }

  // uint64 parent_id = 2;
  if (this->_internal_parent_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_parent_id(), target);
  }

  // uint64 object_id = 3;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_object_id(), target);
  }

  // string client_id = 4;
  if (!this->_internal_client_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "uif.EditCommand.client_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_client_id(), target);
  }

  // uint64 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_timestamp(), target);
  }

  // .uif.RectangleNode rect = 10;
  if (_internal_has_rect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::rect(this), target, stream);
  }

  // .uif.TextNode text = 11;
  if (_internal_has_text()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::text(this), target, stream);
  }

  // .uif.PathNode path = 12;
  if (_internal_has_path()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::path(this), target, stream);
  }

  // .uif.EmptyNode empty = 20;
  if (_internal_has_empty()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::empty(this), target, stream);
  }

  // .uif.ClipRectNode clip = 21;
  if (_internal_has_clip()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::clip(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uif.EditCommand)
  return target;
}

size_t EditCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uif.EditCommand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 4;
  if (!this->_internal_client_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // uint64 parent_id = 2;
  if (this->_internal_parent_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_parent_id());
  }

  // uint64 object_id = 3;
  if (this->_internal_object_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // uint64 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // .uif.EditCommand.EditKind kind = 1;
  if (this->_internal_kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kind());
  }

  switch (node_case()) {
    // .uif.RectangleNode rect = 10;
    case kRect: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *node_.rect_);
      break;
    }
    // .uif.TextNode text = 11;
    case kText: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *node_.text_);
      break;
    }
    // .uif.PathNode path = 12;
    case kPath: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *node_.path_);
      break;
    }
    // .uif.EmptyNode empty = 20;
    case kEmpty: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *node_.empty_);
      break;
    }
    // .uif.ClipRectNode clip = 21;
    case kClip: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *node_.clip_);
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EditCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EditCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EditCommand::GetClassData() const { return &_class_data_; }

void EditCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EditCommand *>(to)->MergeFrom(
      static_cast<const EditCommand &>(from));
}


void EditCommand::MergeFrom(const EditCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uif.EditCommand)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_client_id().empty()) {
    _internal_set_client_id(from._internal_client_id());
  }
  if (from._internal_parent_id() != 0) {
    _internal_set_parent_id(from._internal_parent_id());
  }
  if (from._internal_object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_kind() != 0) {
    _internal_set_kind(from._internal_kind());
  }
  switch (from.node_case()) {
    case kRect: {
      _internal_mutable_rect()->::uif::RectangleNode::MergeFrom(from._internal_rect());
      break;
    }
    case kText: {
      _internal_mutable_text()->::uif::TextNode::MergeFrom(from._internal_text());
      break;
    }
    case kPath: {
      _internal_mutable_path()->::uif::PathNode::MergeFrom(from._internal_path());
      break;
    }
    case kEmpty: {
      _internal_mutable_empty()->::uif::EmptyNode::MergeFrom(from._internal_empty());
      break;
    }
    case kClip: {
      _internal_mutable_clip()->::uif::ClipRectNode::MergeFrom(from._internal_clip());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EditCommand::CopyFrom(const EditCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uif.EditCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditCommand::IsInitialized() const {
  return true;
}

void EditCommand::InternalSwap(EditCommand* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &client_id_, lhs_arena,
      &other->client_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EditCommand, kind_)
      + sizeof(EditCommand::kind_)
      - PROTOBUF_FIELD_OFFSET(EditCommand, parent_id_)>(
          reinterpret_cast<char*>(&parent_id_),
          reinterpret_cast<char*>(&other->parent_id_));
  swap(node_, other->node_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata EditCommand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_uif_2eproto_getter, &descriptor_table_uif_2eproto_once,
      file_level_metadata_uif_2eproto[19]);
}

// ===================================================================

class EditReq::_Internal {
 public:
};

EditReq::EditReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  commands_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:uif.EditReq)
}
EditReq::EditReq(const EditReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      commands_(from.commands_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:uif.EditReq)
}

inline void EditReq::SharedCtor() {
}

EditReq::~EditReq() {
  // @@protoc_insertion_point(destructor:uif.EditReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EditReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EditReq::ArenaDtor(void* object) {
  EditReq* _this = reinterpret_cast< EditReq* >(object);
  (void)_this;
}
void EditReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EditReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EditReq::Clear() {
// @@protoc_insertion_point(message_clear_start:uif.EditReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  commands_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EditReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .uif.EditCommand commands = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_commands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EditReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uif.EditReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .uif.EditCommand commands = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_commands_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_commands(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uif.EditReq)
  return target;
}

size_t EditReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uif.EditReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .uif.EditCommand commands = 2;
  total_size += 1UL * this->_internal_commands_size();
  for (const auto& msg : this->commands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EditReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EditReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EditReq::GetClassData() const { return &_class_data_; }

void EditReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EditReq *>(to)->MergeFrom(
      static_cast<const EditReq &>(from));
}


void EditReq::MergeFrom(const EditReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uif.EditReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  commands_.MergeFrom(from.commands_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EditReq::CopyFrom(const EditReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uif.EditReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditReq::IsInitialized() const {
  return true;
}

void EditReq::InternalSwap(EditReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  commands_.InternalSwap(&other->commands_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EditReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_uif_2eproto_getter, &descriptor_table_uif_2eproto_once,
      file_level_metadata_uif_2eproto[20]);
}

// ===================================================================

class EditResp::_Internal {
 public:
};

EditResp::EditResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:uif.EditResp)
}
EditResp::EditResp(const EditResp& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:uif.EditResp)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EditResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EditResp::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata EditResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_uif_2eproto_getter, &descriptor_table_uif_2eproto_once,
      file_level_metadata_uif_2eproto[21]);
}

// ===================================================================

class GetEventsReq::_Internal {
 public:
};

GetEventsReq::GetEventsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:uif.GetEventsReq)
}
GetEventsReq::GetEventsReq(const GetEventsReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_id().empty()) {
    client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_client_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:uif.GetEventsReq)
}

inline void GetEventsReq::SharedCtor() {
client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetEventsReq::~GetEventsReq() {
  // @@protoc_insertion_point(destructor:uif.GetEventsReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetEventsReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetEventsReq::ArenaDtor(void* object) {
  GetEventsReq* _this = reinterpret_cast< GetEventsReq* >(object);
  (void)_this;
}
void GetEventsReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetEventsReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetEventsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:uif.GetEventsReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetEventsReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "uif.GetEventsReq.client_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetEventsReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uif.GetEventsReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (!this->_internal_client_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "uif.GetEventsReq.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uif.GetEventsReq)
  return target;
}

size_t GetEventsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uif.GetEventsReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1;
  if (!this->_internal_client_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetEventsReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetEventsReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetEventsReq::GetClassData() const { return &_class_data_; }

void GetEventsReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetEventsReq *>(to)->MergeFrom(
      static_cast<const GetEventsReq &>(from));
}


void GetEventsReq::MergeFrom(const GetEventsReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uif.GetEventsReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_client_id().empty()) {
    _internal_set_client_id(from._internal_client_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetEventsReq::CopyFrom(const GetEventsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uif.GetEventsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEventsReq::IsInitialized() const {
  return true;
}

void GetEventsReq::InternalSwap(GetEventsReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &client_id_, lhs_arena,
      &other->client_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEventsReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_uif_2eproto_getter, &descriptor_table_uif_2eproto_once,
      file_level_metadata_uif_2eproto[22]);
}

// ===================================================================

class CloseEvent::_Internal {
 public:
};

CloseEvent::CloseEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:uif.CloseEvent)
}
CloseEvent::CloseEvent(const CloseEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  closed_ = from.closed_;
  // @@protoc_insertion_point(copy_constructor:uif.CloseEvent)
}

inline void CloseEvent::SharedCtor() {
closed_ = false;
}

CloseEvent::~CloseEvent() {
  // @@protoc_insertion_point(destructor:uif.CloseEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CloseEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CloseEvent::ArenaDtor(void* object) {
  CloseEvent* _this = reinterpret_cast< CloseEvent* >(object);
  (void)_this;
}
void CloseEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CloseEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CloseEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:uif.CloseEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  closed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool closed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          closed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CloseEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uif.CloseEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool closed = 1;
  if (this->_internal_closed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_closed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uif.CloseEvent)
  return target;
}

size_t CloseEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uif.CloseEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool closed = 1;
  if (this->_internal_closed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CloseEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CloseEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CloseEvent::GetClassData() const { return &_class_data_; }

void CloseEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CloseEvent *>(to)->MergeFrom(
      static_cast<const CloseEvent &>(from));
}


void CloseEvent::MergeFrom(const CloseEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uif.CloseEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_closed() != 0) {
    _internal_set_closed(from._internal_closed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CloseEvent::CopyFrom(const CloseEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uif.CloseEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseEvent::IsInitialized() const {
  return true;
}

void CloseEvent::InternalSwap(CloseEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(closed_, other->closed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_uif_2eproto_getter, &descriptor_table_uif_2eproto_once,
      file_level_metadata_uif_2eproto[23]);
}

// ===================================================================

class MouseEvent::_Internal {
 public:
  static const ::uif::Point& location(const MouseEvent* msg);
};

const ::uif::Point&
MouseEvent::_Internal::location(const MouseEvent* msg) {
  return *msg->location_;
}
MouseEvent::MouseEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:uif.MouseEvent)
}
MouseEvent::MouseEvent(const MouseEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::uif::Point(*from.location_);
  } else {
    location_ = nullptr;
  }
  ::memcpy(&button_, &from.button_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&button_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:uif.MouseEvent)
}

inline void MouseEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&location_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&location_)) + sizeof(state_));
}

MouseEvent::~MouseEvent() {
  // @@protoc_insertion_point(destructor:uif.MouseEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MouseEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete location_;
}

void MouseEvent::ArenaDtor(void* object) {
  MouseEvent* _this = reinterpret_cast< MouseEvent* >(object);
  (void)_this;
}
void MouseEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MouseEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MouseEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:uif.MouseEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  ::memset(&button_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&button_)) + sizeof(state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MouseEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .uif.MouseButton button = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_button(static_cast<::uif::MouseButton>(val));
        } else
          goto handle_unusual;
        continue;
      // .uif.MouseState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::uif::MouseState>(val));
        } else
          goto handle_unusual;
        continue;
      // .uif.Point location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MouseEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uif.MouseEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .uif.MouseButton button = 1;
  if (this->_internal_button() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_button(), target);
  }

  // .uif.MouseState state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // .uif.Point location = 3;
  if (this->_internal_has_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::location(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uif.MouseEvent)
  return target;
}

size_t MouseEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uif.MouseEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .uif.Point location = 3;
  if (this->_internal_has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // .uif.MouseButton button = 1;
  if (this->_internal_button() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_button());
  }

  // .uif.MouseState state = 2;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MouseEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MouseEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MouseEvent::GetClassData() const { return &_class_data_; }

void MouseEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MouseEvent *>(to)->MergeFrom(
      static_cast<const MouseEvent &>(from));
}


void MouseEvent::MergeFrom(const MouseEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uif.MouseEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_location()) {
    _internal_mutable_location()->::uif::Point::MergeFrom(from._internal_location());
  }
  if (from._internal_button() != 0) {
    _internal_set_button(from._internal_button());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MouseEvent::CopyFrom(const MouseEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uif.MouseEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MouseEvent::IsInitialized() const {
  return true;
}

void MouseEvent::InternalSwap(MouseEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MouseEvent, state_)
      + sizeof(MouseEvent::state_)
      - PROTOBUF_FIELD_OFFSET(MouseEvent, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MouseEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_uif_2eproto_getter, &descriptor_table_uif_2eproto_once,
      file_level_metadata_uif_2eproto[24]);
}

// ===================================================================

class KeyboardEvent::_Internal {
 public:
};

KeyboardEvent::KeyboardEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:uif.KeyboardEvent)
}
KeyboardEvent::KeyboardEvent(const KeyboardEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&key_code_) -
    reinterpret_cast<char*>(&state_)) + sizeof(key_code_));
  // @@protoc_insertion_point(copy_constructor:uif.KeyboardEvent)
}

inline void KeyboardEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&key_code_) -
    reinterpret_cast<char*>(&state_)) + sizeof(key_code_));
}

KeyboardEvent::~KeyboardEvent() {
  // @@protoc_insertion_point(destructor:uif.KeyboardEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void KeyboardEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void KeyboardEvent::ArenaDtor(void* object) {
  KeyboardEvent* _this = reinterpret_cast< KeyboardEvent* >(object);
  (void)_this;
}
void KeyboardEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyboardEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KeyboardEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:uif.KeyboardEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_code_) -
      reinterpret_cast<char*>(&state_)) + sizeof(key_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyboardEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .uif.KeyState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::uif::KeyState>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 key_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          key_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeyboardEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uif.KeyboardEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .uif.KeyState state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  // uint32 key_code = 2;
  if (this->_internal_key_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_key_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uif.KeyboardEvent)
  return target;
}

size_t KeyboardEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uif.KeyboardEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .uif.KeyState state = 1;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // uint32 key_code = 2;
  if (this->_internal_key_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_key_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeyboardEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KeyboardEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeyboardEvent::GetClassData() const { return &_class_data_; }

void KeyboardEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<KeyboardEvent *>(to)->MergeFrom(
      static_cast<const KeyboardEvent &>(from));
}


void KeyboardEvent::MergeFrom(const KeyboardEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uif.KeyboardEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from._internal_key_code() != 0) {
    _internal_set_key_code(from._internal_key_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeyboardEvent::CopyFrom(const KeyboardEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uif.KeyboardEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyboardEvent::IsInitialized() const {
  return true;
}

void KeyboardEvent::InternalSwap(KeyboardEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KeyboardEvent, key_code_)
      + sizeof(KeyboardEvent::key_code_)
      - PROTOBUF_FIELD_OFFSET(KeyboardEvent, state_)>(
          reinterpret_cast<char*>(&state_),
          reinterpret_cast<char*>(&other->state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyboardEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_uif_2eproto_getter, &descriptor_table_uif_2eproto_once,
      file_level_metadata_uif_2eproto[25]);
}

// ===================================================================

class TextHitEvent::_Internal {
 public:
  static const ::uif::MouseEvent& mouse(const TextHitEvent* msg);
};

const ::uif::MouseEvent&
TextHitEvent::_Internal::mouse(const TextHitEvent* msg) {
  return *msg->mouse_;
}
TextHitEvent::TextHitEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:uif.TextHitEvent)
}
TextHitEvent::TextHitEvent(const TextHitEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mouse()) {
    mouse_ = new ::uif::MouseEvent(*from.mouse_);
  } else {
    mouse_ = nullptr;
  }
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&object_id_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(object_id_));
  // @@protoc_insertion_point(copy_constructor:uif.TextHitEvent)
}

inline void TextHitEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mouse_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&object_id_) -
    reinterpret_cast<char*>(&mouse_)) + sizeof(object_id_));
}

TextHitEvent::~TextHitEvent() {
  // @@protoc_insertion_point(destructor:uif.TextHitEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TextHitEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete mouse_;
}

void TextHitEvent::ArenaDtor(void* object) {
  TextHitEvent* _this = reinterpret_cast< TextHitEvent* >(object);
  (void)_this;
}
void TextHitEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextHitEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TextHitEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:uif.TextHitEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && mouse_ != nullptr) {
    delete mouse_;
  }
  mouse_ = nullptr;
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&object_id_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(object_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextHitEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .uif.MouseEvent mouse = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mouse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 object_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TextHitEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uif.TextHitEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .uif.MouseEvent mouse = 1;
  if (this->_internal_has_mouse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mouse(this), target, stream);
  }

  // uint32 offset = 2;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_offset(), target);
  }

  // uint32 length = 3;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_length(), target);
  }

  // uint64 object_id = 4;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uif.TextHitEvent)
  return target;
}

size_t TextHitEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uif.TextHitEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .uif.MouseEvent mouse = 1;
  if (this->_internal_has_mouse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mouse_);
  }

  // uint32 offset = 2;
  if (this->_internal_offset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_offset());
  }

  // uint32 length = 3;
  if (this->_internal_length() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_length());
  }

  // uint64 object_id = 4;
  if (this->_internal_object_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TextHitEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TextHitEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TextHitEvent::GetClassData() const { return &_class_data_; }

void TextHitEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TextHitEvent *>(to)->MergeFrom(
      static_cast<const TextHitEvent &>(from));
}


void TextHitEvent::MergeFrom(const TextHitEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uif.TextHitEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mouse()) {
    _internal_mutable_mouse()->::uif::MouseEvent::MergeFrom(from._internal_mouse());
  }
  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from._internal_length() != 0) {
    _internal_set_length(from._internal_length());
  }
  if (from._internal_object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TextHitEvent::CopyFrom(const TextHitEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uif.TextHitEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextHitEvent::IsInitialized() const {
  return true;
}

void TextHitEvent::InternalSwap(TextHitEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TextHitEvent, object_id_)
      + sizeof(TextHitEvent::object_id_)
      - PROTOBUF_FIELD_OFFSET(TextHitEvent, mouse_)>(
          reinterpret_cast<char*>(&mouse_),
          reinterpret_cast<char*>(&other->mouse_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TextHitEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_uif_2eproto_getter, &descriptor_table_uif_2eproto_once,
      file_level_metadata_uif_2eproto[26]);
}

// ===================================================================

class Event::_Internal {
 public:
  static const ::uif::CloseEvent& close(const Event* msg);
  static const ::uif::MouseEvent& mouse(const Event* msg);
  static const ::uif::KeyboardEvent& key(const Event* msg);
  static const ::uif::TextHitEvent& texthit(const Event* msg);
};

const ::uif::CloseEvent&
Event::_Internal::close(const Event* msg) {
  return *msg->event_.close_;
}
const ::uif::MouseEvent&
Event::_Internal::mouse(const Event* msg) {
  return *msg->event_.mouse_;
}
const ::uif::KeyboardEvent&
Event::_Internal::key(const Event* msg) {
  return *msg->event_.key_;
}
const ::uif::TextHitEvent&
Event::_Internal::texthit(const Event* msg) {
  return *msg->event_.texthit_;
}
void Event::set_allocated_close(::uif::CloseEvent* close) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (close) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::uif::CloseEvent>::GetOwningArena(close);
    if (message_arena != submessage_arena) {
      close = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, close, submessage_arena);
    }
    set_has_close();
    event_.close_ = close;
  }
  // @@protoc_insertion_point(field_set_allocated:uif.Event.close)
}
void Event::set_allocated_mouse(::uif::MouseEvent* mouse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mouse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::uif::MouseEvent>::GetOwningArena(mouse);
    if (message_arena != submessage_arena) {
      mouse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mouse, submessage_arena);
    }
    set_has_mouse();
    event_.mouse_ = mouse;
  }
  // @@protoc_insertion_point(field_set_allocated:uif.Event.mouse)
}
void Event::set_allocated_key(::uif::KeyboardEvent* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::uif::KeyboardEvent>::GetOwningArena(key);
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    set_has_key();
    event_.key_ = key;
  }
  // @@protoc_insertion_point(field_set_allocated:uif.Event.key)
}
void Event::set_allocated_texthit(::uif::TextHitEvent* texthit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (texthit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::uif::TextHitEvent>::GetOwningArena(texthit);
    if (message_arena != submessage_arena) {
      texthit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, texthit, submessage_arena);
    }
    set_has_texthit();
    event_.texthit_ = texthit;
  }
  // @@protoc_insertion_point(field_set_allocated:uif.Event.textHit)
}
Event::Event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:uif.Event)
}
Event::Event(const Event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_event();
  switch (from.event_case()) {
    case kClose: {
      _internal_mutable_close()->::uif::CloseEvent::MergeFrom(from._internal_close());
      break;
    }
    case kMouse: {
      _internal_mutable_mouse()->::uif::MouseEvent::MergeFrom(from._internal_mouse());
      break;
    }
    case kKey: {
      _internal_mutable_key()->::uif::KeyboardEvent::MergeFrom(from._internal_key());
      break;
    }
    case kTextHit: {
      _internal_mutable_texthit()->::uif::TextHitEvent::MergeFrom(from._internal_texthit());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:uif.Event)
}

inline void Event::SharedCtor() {
clear_has_event();
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:uif.Event)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Event::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_event()) {
    clear_event();
  }
}

void Event::ArenaDtor(void* object) {
  Event* _this = reinterpret_cast< Event* >(object);
  (void)_this;
}
void Event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Event::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:uif.Event)
  switch (event_case()) {
    case kClose: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_.close_;
      }
      break;
    }
    case kMouse: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_.mouse_;
      }
      break;
    }
    case kKey: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_.key_;
      }
      break;
    }
    case kTextHit: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_.texthit_;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:uif.Event)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_event();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .uif.CloseEvent close = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_close(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uif.MouseEvent mouse = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_mouse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uif.KeyboardEvent key = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uif.TextHitEvent textHit = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_texthit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Event::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uif.Event)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .uif.CloseEvent close = 10;
  if (_internal_has_close()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::close(this), target, stream);
  }

  // .uif.MouseEvent mouse = 11;
  if (_internal_has_mouse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::mouse(this), target, stream);
  }

  // .uif.KeyboardEvent key = 12;
  if (_internal_has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::key(this), target, stream);
  }

  // .uif.TextHitEvent textHit = 13;
  if (_internal_has_texthit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::texthit(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uif.Event)
  return target;
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uif.Event)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (event_case()) {
    // .uif.CloseEvent close = 10;
    case kClose: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.close_);
      break;
    }
    // .uif.MouseEvent mouse = 11;
    case kMouse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mouse_);
      break;
    }
    // .uif.KeyboardEvent key = 12;
    case kKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.key_);
      break;
    }
    // .uif.TextHitEvent textHit = 13;
    case kTextHit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.texthit_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Event::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Event::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Event::GetClassData() const { return &_class_data_; }

void Event::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Event *>(to)->MergeFrom(
      static_cast<const Event &>(from));
}


void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uif.Event)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.event_case()) {
    case kClose: {
      _internal_mutable_close()->::uif::CloseEvent::MergeFrom(from._internal_close());
      break;
    }
    case kMouse: {
      _internal_mutable_mouse()->::uif::MouseEvent::MergeFrom(from._internal_mouse());
      break;
    }
    case kKey: {
      _internal_mutable_key()->::uif::KeyboardEvent::MergeFrom(from._internal_key());
      break;
    }
    case kTextHit: {
      _internal_mutable_texthit()->::uif::TextHitEvent::MergeFrom(from._internal_texthit());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uif.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::InternalSwap(Event* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_, other->event_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Event::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_uif_2eproto_getter, &descriptor_table_uif_2eproto_once,
      file_level_metadata_uif_2eproto[27]);
}

// ===================================================================

class GetServerPropertiesReq::_Internal {
 public:
};

GetServerPropertiesReq::GetServerPropertiesReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:uif.GetServerPropertiesReq)
}
GetServerPropertiesReq::GetServerPropertiesReq(const GetServerPropertiesReq& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:uif.GetServerPropertiesReq)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetServerPropertiesReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetServerPropertiesReq::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetServerPropertiesReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_uif_2eproto_getter, &descriptor_table_uif_2eproto_once,
      file_level_metadata_uif_2eproto[28]);
}

// ===================================================================

class GetServerPropertiesResp::_Internal {
 public:
};

GetServerPropertiesResp::GetServerPropertiesResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:uif.GetServerPropertiesResp)
}
GetServerPropertiesResp::GetServerPropertiesResp(const GetServerPropertiesResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&window_width_, &from.window_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&window_height_) -
    reinterpret_cast<char*>(&window_width_)) + sizeof(window_height_));
  // @@protoc_insertion_point(copy_constructor:uif.GetServerPropertiesResp)
}

inline void GetServerPropertiesResp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&window_width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&window_height_) -
    reinterpret_cast<char*>(&window_width_)) + sizeof(window_height_));
}

GetServerPropertiesResp::~GetServerPropertiesResp() {
  // @@protoc_insertion_point(destructor:uif.GetServerPropertiesResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetServerPropertiesResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetServerPropertiesResp::ArenaDtor(void* object) {
  GetServerPropertiesResp* _this = reinterpret_cast< GetServerPropertiesResp* >(object);
  (void)_this;
}
void GetServerPropertiesResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServerPropertiesResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetServerPropertiesResp::Clear() {
// @@protoc_insertion_point(message_clear_start:uif.GetServerPropertiesResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&window_width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&window_height_) -
      reinterpret_cast<char*>(&window_width_)) + sizeof(window_height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServerPropertiesResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 window_width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          window_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 window_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          window_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetServerPropertiesResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uif.GetServerPropertiesResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 window_width = 1;
  if (this->_internal_window_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_window_width(), target);
  }

  // uint32 window_height = 2;
  if (this->_internal_window_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_window_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uif.GetServerPropertiesResp)
  return target;
}

size_t GetServerPropertiesResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uif.GetServerPropertiesResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 window_width = 1;
  if (this->_internal_window_width() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_window_width());
  }

  // uint32 window_height = 2;
  if (this->_internal_window_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_window_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetServerPropertiesResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetServerPropertiesResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetServerPropertiesResp::GetClassData() const { return &_class_data_; }

void GetServerPropertiesResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetServerPropertiesResp *>(to)->MergeFrom(
      static_cast<const GetServerPropertiesResp &>(from));
}


void GetServerPropertiesResp::MergeFrom(const GetServerPropertiesResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uif.GetServerPropertiesResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_window_width() != 0) {
    _internal_set_window_width(from._internal_window_width());
  }
  if (from._internal_window_height() != 0) {
    _internal_set_window_height(from._internal_window_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetServerPropertiesResp::CopyFrom(const GetServerPropertiesResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uif.GetServerPropertiesResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServerPropertiesResp::IsInitialized() const {
  return true;
}

void GetServerPropertiesResp::InternalSwap(GetServerPropertiesResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetServerPropertiesResp, window_height_)
      + sizeof(GetServerPropertiesResp::window_height_)
      - PROTOBUF_FIELD_OFFSET(GetServerPropertiesResp, window_width_)>(
          reinterpret_cast<char*>(&window_width_),
          reinterpret_cast<char*>(&other->window_width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServerPropertiesResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_uif_2eproto_getter, &descriptor_table_uif_2eproto_once,
      file_level_metadata_uif_2eproto[29]);
}

// ===================================================================

class SetClearColorReq::_Internal {
 public:
};

SetClearColorReq::SetClearColorReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:uif.SetClearColorReq)
}
SetClearColorReq::SetClearColorReq(const SetClearColorReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  color_ = from.color_;
  // @@protoc_insertion_point(copy_constructor:uif.SetClearColorReq)
}

inline void SetClearColorReq::SharedCtor() {
color_ = 0u;
}

SetClearColorReq::~SetClearColorReq() {
  // @@protoc_insertion_point(destructor:uif.SetClearColorReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetClearColorReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetClearColorReq::ArenaDtor(void* object) {
  SetClearColorReq* _this = reinterpret_cast< SetClearColorReq* >(object);
  (void)_this;
}
void SetClearColorReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetClearColorReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetClearColorReq::Clear() {
// @@protoc_insertion_point(message_clear_start:uif.SetClearColorReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  color_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetClearColorReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetClearColorReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uif.SetClearColorReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 color = 1;
  if (this->_internal_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uif.SetClearColorReq)
  return target;
}

size_t SetClearColorReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uif.SetClearColorReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 color = 1;
  if (this->_internal_color() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_color());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetClearColorReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetClearColorReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetClearColorReq::GetClassData() const { return &_class_data_; }

void SetClearColorReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetClearColorReq *>(to)->MergeFrom(
      static_cast<const SetClearColorReq &>(from));
}


void SetClearColorReq::MergeFrom(const SetClearColorReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uif.SetClearColorReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_color() != 0) {
    _internal_set_color(from._internal_color());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetClearColorReq::CopyFrom(const SetClearColorReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uif.SetClearColorReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetClearColorReq::IsInitialized() const {
  return true;
}

void SetClearColorReq::InternalSwap(SetClearColorReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(color_, other->color_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetClearColorReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_uif_2eproto_getter, &descriptor_table_uif_2eproto_once,
      file_level_metadata_uif_2eproto[30]);
}

// ===================================================================

class SetClearColorResp::_Internal {
 public:
};

SetClearColorResp::SetClearColorResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:uif.SetClearColorResp)
}
SetClearColorResp::SetClearColorResp(const SetClearColorResp& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:uif.SetClearColorResp)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetClearColorResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetClearColorResp::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SetClearColorResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_uif_2eproto_getter, &descriptor_table_uif_2eproto_once,
      file_level_metadata_uif_2eproto[31]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace uif
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::uif::Point* Arena::CreateMaybeMessage< ::uif::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uif::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::uif::Rectangle* Arena::CreateMaybeMessage< ::uif::Rectangle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uif::Rectangle >(arena);
}
template<> PROTOBUF_NOINLINE ::uif::SolidBrush* Arena::CreateMaybeMessage< ::uif::SolidBrush >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uif::SolidBrush >(arena);
}
template<> PROTOBUF_NOINLINE ::uif::GradientStop* Arena::CreateMaybeMessage< ::uif::GradientStop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uif::GradientStop >(arena);
}
template<> PROTOBUF_NOINLINE ::uif::LinearGradientBrush* Arena::CreateMaybeMessage< ::uif::LinearGradientBrush >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uif::LinearGradientBrush >(arena);
}
template<> PROTOBUF_NOINLINE ::uif::Brush* Arena::CreateMaybeMessage< ::uif::Brush >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uif::Brush >(arena);
}
template<> PROTOBUF_NOINLINE ::uif::RectangleNode* Arena::CreateMaybeMessage< ::uif::RectangleNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uif::RectangleNode >(arena);
}
template<> PROTOBUF_NOINLINE ::uif::TextEditSpan* Arena::CreateMaybeMessage< ::uif::TextEditSpan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uif::TextEditSpan >(arena);
}
template<> PROTOBUF_NOINLINE ::uif::TextNode* Arena::CreateMaybeMessage< ::uif::TextNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uif::TextNode >(arena);
}
template<> PROTOBUF_NOINLINE ::uif::PCBegin* Arena::CreateMaybeMessage< ::uif::PCBegin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uif::PCBegin >(arena);
}
template<> PROTOBUF_NOINLINE ::uif::PCEnd* Arena::CreateMaybeMessage< ::uif::PCEnd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uif::PCEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::uif::PCLineTo* Arena::CreateMaybeMessage< ::uif::PCLineTo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uif::PCLineTo >(arena);
}
template<> PROTOBUF_NOINLINE ::uif::PCCubicCurve* Arena::CreateMaybeMessage< ::uif::PCCubicCurve >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uif::PCCubicCurve >(arena);
}
template<> PROTOBUF_NOINLINE ::uif::PCQuadraticCurve* Arena::CreateMaybeMessage< ::uif::PCQuadraticCurve >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uif::PCQuadraticCurve >(arena);
}
template<> PROTOBUF_NOINLINE ::uif::PCArc* Arena::CreateMaybeMessage< ::uif::PCArc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uif::PCArc >(arena);
}
template<> PROTOBUF_NOINLINE ::uif::PathCommand* Arena::CreateMaybeMessage< ::uif::PathCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uif::PathCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::uif::PathNode* Arena::CreateMaybeMessage< ::uif::PathNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uif::PathNode >(arena);
}
template<> PROTOBUF_NOINLINE ::uif::EmptyNode* Arena::CreateMaybeMessage< ::uif::EmptyNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uif::EmptyNode >(arena);
}
template<> PROTOBUF_NOINLINE ::uif::ClipRectNode* Arena::CreateMaybeMessage< ::uif::ClipRectNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uif::ClipRectNode >(arena);
}
template<> PROTOBUF_NOINLINE ::uif::EditCommand* Arena::CreateMaybeMessage< ::uif::EditCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uif::EditCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::uif::EditReq* Arena::CreateMaybeMessage< ::uif::EditReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uif::EditReq >(arena);
}
template<> PROTOBUF_NOINLINE ::uif::EditResp* Arena::CreateMaybeMessage< ::uif::EditResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uif::EditResp >(arena);
}
template<> PROTOBUF_NOINLINE ::uif::GetEventsReq* Arena::CreateMaybeMessage< ::uif::GetEventsReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uif::GetEventsReq >(arena);
}
template<> PROTOBUF_NOINLINE ::uif::CloseEvent* Arena::CreateMaybeMessage< ::uif::CloseEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uif::CloseEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::uif::MouseEvent* Arena::CreateMaybeMessage< ::uif::MouseEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uif::MouseEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::uif::KeyboardEvent* Arena::CreateMaybeMessage< ::uif::KeyboardEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uif::KeyboardEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::uif::TextHitEvent* Arena::CreateMaybeMessage< ::uif::TextHitEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uif::TextHitEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::uif::Event* Arena::CreateMaybeMessage< ::uif::Event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uif::Event >(arena);
}
template<> PROTOBUF_NOINLINE ::uif::GetServerPropertiesReq* Arena::CreateMaybeMessage< ::uif::GetServerPropertiesReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uif::GetServerPropertiesReq >(arena);
}
template<> PROTOBUF_NOINLINE ::uif::GetServerPropertiesResp* Arena::CreateMaybeMessage< ::uif::GetServerPropertiesResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uif::GetServerPropertiesResp >(arena);
}
template<> PROTOBUF_NOINLINE ::uif::SetClearColorReq* Arena::CreateMaybeMessage< ::uif::SetClearColorReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uif::SetClearColorReq >(arena);
}
template<> PROTOBUF_NOINLINE ::uif::SetClearColorResp* Arena::CreateMaybeMessage< ::uif::SetClearColorResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uif::SetClearColorResp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
