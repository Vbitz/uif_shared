// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: uif.proto

#include "uif.pb.h"
#include "uif.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace uif {

static const char* UIFramework_method_names[] = {
  "/uif.UIFramework/Edit",
  "/uif.UIFramework/GetEvents",
  "/uif.UIFramework/GetServerProperties",
  "/uif.UIFramework/SetClearColor",
};

std::unique_ptr< UIFramework::Stub> UIFramework::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< UIFramework::Stub> stub(new UIFramework::Stub(channel, options));
  return stub;
}

UIFramework::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Edit_(UIFramework_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEvents_(UIFramework_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetServerProperties_(UIFramework_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetClearColor_(UIFramework_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status UIFramework::Stub::Edit(::grpc::ClientContext* context, const ::uif::EditReq& request, ::uif::EditResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::uif::EditReq, ::uif::EditResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Edit_, context, request, response);
}

void UIFramework::Stub::async::Edit(::grpc::ClientContext* context, const ::uif::EditReq* request, ::uif::EditResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::uif::EditReq, ::uif::EditResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Edit_, context, request, response, std::move(f));
}

void UIFramework::Stub::async::Edit(::grpc::ClientContext* context, const ::uif::EditReq* request, ::uif::EditResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Edit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::uif::EditResp>* UIFramework::Stub::PrepareAsyncEditRaw(::grpc::ClientContext* context, const ::uif::EditReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::uif::EditResp, ::uif::EditReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Edit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::uif::EditResp>* UIFramework::Stub::AsyncEditRaw(::grpc::ClientContext* context, const ::uif::EditReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEditRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::uif::Event>* UIFramework::Stub::GetEventsRaw(::grpc::ClientContext* context, const ::uif::GetEventsReq& request) {
  return ::grpc::internal::ClientReaderFactory< ::uif::Event>::Create(channel_.get(), rpcmethod_GetEvents_, context, request);
}

void UIFramework::Stub::async::GetEvents(::grpc::ClientContext* context, const ::uif::GetEventsReq* request, ::grpc::ClientReadReactor< ::uif::Event>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::uif::Event>::Create(stub_->channel_.get(), stub_->rpcmethod_GetEvents_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::uif::Event>* UIFramework::Stub::AsyncGetEventsRaw(::grpc::ClientContext* context, const ::uif::GetEventsReq& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::uif::Event>::Create(channel_.get(), cq, rpcmethod_GetEvents_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::uif::Event>* UIFramework::Stub::PrepareAsyncGetEventsRaw(::grpc::ClientContext* context, const ::uif::GetEventsReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::uif::Event>::Create(channel_.get(), cq, rpcmethod_GetEvents_, context, request, false, nullptr);
}

::grpc::Status UIFramework::Stub::GetServerProperties(::grpc::ClientContext* context, const ::uif::GetServerPropertiesReq& request, ::uif::GetServerPropertiesResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::uif::GetServerPropertiesReq, ::uif::GetServerPropertiesResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetServerProperties_, context, request, response);
}

void UIFramework::Stub::async::GetServerProperties(::grpc::ClientContext* context, const ::uif::GetServerPropertiesReq* request, ::uif::GetServerPropertiesResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::uif::GetServerPropertiesReq, ::uif::GetServerPropertiesResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServerProperties_, context, request, response, std::move(f));
}

void UIFramework::Stub::async::GetServerProperties(::grpc::ClientContext* context, const ::uif::GetServerPropertiesReq* request, ::uif::GetServerPropertiesResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServerProperties_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::uif::GetServerPropertiesResp>* UIFramework::Stub::PrepareAsyncGetServerPropertiesRaw(::grpc::ClientContext* context, const ::uif::GetServerPropertiesReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::uif::GetServerPropertiesResp, ::uif::GetServerPropertiesReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetServerProperties_, context, request);
}

::grpc::ClientAsyncResponseReader< ::uif::GetServerPropertiesResp>* UIFramework::Stub::AsyncGetServerPropertiesRaw(::grpc::ClientContext* context, const ::uif::GetServerPropertiesReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetServerPropertiesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UIFramework::Stub::SetClearColor(::grpc::ClientContext* context, const ::uif::SetClearColorReq& request, ::uif::SetClearColorResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::uif::SetClearColorReq, ::uif::SetClearColorResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetClearColor_, context, request, response);
}

void UIFramework::Stub::async::SetClearColor(::grpc::ClientContext* context, const ::uif::SetClearColorReq* request, ::uif::SetClearColorResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::uif::SetClearColorReq, ::uif::SetClearColorResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetClearColor_, context, request, response, std::move(f));
}

void UIFramework::Stub::async::SetClearColor(::grpc::ClientContext* context, const ::uif::SetClearColorReq* request, ::uif::SetClearColorResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetClearColor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::uif::SetClearColorResp>* UIFramework::Stub::PrepareAsyncSetClearColorRaw(::grpc::ClientContext* context, const ::uif::SetClearColorReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::uif::SetClearColorResp, ::uif::SetClearColorReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetClearColor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::uif::SetClearColorResp>* UIFramework::Stub::AsyncSetClearColorRaw(::grpc::ClientContext* context, const ::uif::SetClearColorReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetClearColorRaw(context, request, cq);
  result->StartCall();
  return result;
}

UIFramework::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UIFramework_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UIFramework::Service, ::uif::EditReq, ::uif::EditResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UIFramework::Service* service,
             ::grpc::ServerContext* ctx,
             const ::uif::EditReq* req,
             ::uif::EditResp* resp) {
               return service->Edit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UIFramework_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< UIFramework::Service, ::uif::GetEventsReq, ::uif::Event>(
          [](UIFramework::Service* service,
             ::grpc::ServerContext* ctx,
             const ::uif::GetEventsReq* req,
             ::grpc::ServerWriter<::uif::Event>* writer) {
               return service->GetEvents(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UIFramework_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UIFramework::Service, ::uif::GetServerPropertiesReq, ::uif::GetServerPropertiesResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UIFramework::Service* service,
             ::grpc::ServerContext* ctx,
             const ::uif::GetServerPropertiesReq* req,
             ::uif::GetServerPropertiesResp* resp) {
               return service->GetServerProperties(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UIFramework_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UIFramework::Service, ::uif::SetClearColorReq, ::uif::SetClearColorResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UIFramework::Service* service,
             ::grpc::ServerContext* ctx,
             const ::uif::SetClearColorReq* req,
             ::uif::SetClearColorResp* resp) {
               return service->SetClearColor(ctx, req, resp);
             }, this)));
}

UIFramework::Service::~Service() {
}

::grpc::Status UIFramework::Service::Edit(::grpc::ServerContext* context, const ::uif::EditReq* request, ::uif::EditResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UIFramework::Service::GetEvents(::grpc::ServerContext* context, const ::uif::GetEventsReq* request, ::grpc::ServerWriter< ::uif::Event>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UIFramework::Service::GetServerProperties(::grpc::ServerContext* context, const ::uif::GetServerPropertiesReq* request, ::uif::GetServerPropertiesResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UIFramework::Service::SetClearColor(::grpc::ServerContext* context, const ::uif::SetClearColorReq* request, ::uif::SetClearColorResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace uif

